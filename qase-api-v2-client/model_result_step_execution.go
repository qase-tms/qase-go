/*
Qase.io TestOps API v2

Qase TestOps API v2 Specification.

API version: 2.0.0
Contact: support@qase.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2_client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ResultStepExecution type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResultStepExecution{}

// ResultStepExecution struct for ResultStepExecution
type ResultStepExecution struct {
	StartTime   NullableFloat64  `json:"start_time,omitempty"`
	EndTime     NullableFloat64  `json:"end_time,omitempty"`
	Status      ResultStepStatus `json:"status"`
	Duration    NullableInt64    `json:"duration,omitempty"`
	Comment     *string          `json:"comment,omitempty"`
	Attachments []string         `json:"attachments,omitempty"`
}

type _ResultStepExecution ResultStepExecution

// NewResultStepExecution instantiates a new ResultStepExecution object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResultStepExecution(status ResultStepStatus) *ResultStepExecution {
	this := ResultStepExecution{}
	this.Status = status
	return &this
}

// NewResultStepExecutionWithDefaults instantiates a new ResultStepExecution object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResultStepExecutionWithDefaults() *ResultStepExecution {
	this := ResultStepExecution{}
	return &this
}

// GetStartTime returns the StartTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResultStepExecution) GetStartTime() float64 {
	if o == nil || IsNil(o.StartTime.Get()) {
		var ret float64
		return ret
	}
	return *o.StartTime.Get()
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResultStepExecution) GetStartTimeOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartTime.Get(), o.StartTime.IsSet()
}

// HasStartTime returns a boolean if a field has been set.
func (o *ResultStepExecution) HasStartTime() bool {
	if o != nil && o.StartTime.IsSet() {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given NullableFloat64 and assigns it to the StartTime field.
func (o *ResultStepExecution) SetStartTime(v float64) {
	o.StartTime.Set(&v)
}

// SetStartTimeNil sets the value for StartTime to be an explicit nil
func (o *ResultStepExecution) SetStartTimeNil() {
	o.StartTime.Set(nil)
}

// UnsetStartTime ensures that no value is present for StartTime, not even an explicit nil
func (o *ResultStepExecution) UnsetStartTime() {
	o.StartTime.Unset()
}

// GetEndTime returns the EndTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResultStepExecution) GetEndTime() float64 {
	if o == nil || IsNil(o.EndTime.Get()) {
		var ret float64
		return ret
	}
	return *o.EndTime.Get()
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResultStepExecution) GetEndTimeOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.EndTime.Get(), o.EndTime.IsSet()
}

// HasEndTime returns a boolean if a field has been set.
func (o *ResultStepExecution) HasEndTime() bool {
	if o != nil && o.EndTime.IsSet() {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given NullableFloat64 and assigns it to the EndTime field.
func (o *ResultStepExecution) SetEndTime(v float64) {
	o.EndTime.Set(&v)
}

// SetEndTimeNil sets the value for EndTime to be an explicit nil
func (o *ResultStepExecution) SetEndTimeNil() {
	o.EndTime.Set(nil)
}

// UnsetEndTime ensures that no value is present for EndTime, not even an explicit nil
func (o *ResultStepExecution) UnsetEndTime() {
	o.EndTime.Unset()
}

// GetStatus returns the Status field value
func (o *ResultStepExecution) GetStatus() ResultStepStatus {
	if o == nil {
		var ret ResultStepStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ResultStepExecution) GetStatusOk() (*ResultStepStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ResultStepExecution) SetStatus(v ResultStepStatus) {
	o.Status = v
}

// GetDuration returns the Duration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResultStepExecution) GetDuration() int64 {
	if o == nil || IsNil(o.Duration.Get()) {
		var ret int64
		return ret
	}
	return *o.Duration.Get()
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResultStepExecution) GetDurationOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Duration.Get(), o.Duration.IsSet()
}

// HasDuration returns a boolean if a field has been set.
func (o *ResultStepExecution) HasDuration() bool {
	if o != nil && o.Duration.IsSet() {
		return true
	}

	return false
}

// SetDuration gets a reference to the given NullableInt64 and assigns it to the Duration field.
func (o *ResultStepExecution) SetDuration(v int64) {
	o.Duration.Set(&v)
}

// SetDurationNil sets the value for Duration to be an explicit nil
func (o *ResultStepExecution) SetDurationNil() {
	o.Duration.Set(nil)
}

// UnsetDuration ensures that no value is present for Duration, not even an explicit nil
func (o *ResultStepExecution) UnsetDuration() {
	o.Duration.Unset()
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *ResultStepExecution) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultStepExecution) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *ResultStepExecution) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *ResultStepExecution) SetComment(v string) {
	o.Comment = &v
}

// GetAttachments returns the Attachments field value if set, zero value otherwise.
func (o *ResultStepExecution) GetAttachments() []string {
	if o == nil || IsNil(o.Attachments) {
		var ret []string
		return ret
	}
	return o.Attachments
}

// GetAttachmentsOk returns a tuple with the Attachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultStepExecution) GetAttachmentsOk() ([]string, bool) {
	if o == nil || IsNil(o.Attachments) {
		return nil, false
	}
	return o.Attachments, true
}

// HasAttachments returns a boolean if a field has been set.
func (o *ResultStepExecution) HasAttachments() bool {
	if o != nil && !IsNil(o.Attachments) {
		return true
	}

	return false
}

// SetAttachments gets a reference to the given []string and assigns it to the Attachments field.
func (o *ResultStepExecution) SetAttachments(v []string) {
	o.Attachments = v
}

func (o ResultStepExecution) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResultStepExecution) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.StartTime.IsSet() {
		toSerialize["start_time"] = o.StartTime.Get()
	}
	if o.EndTime.IsSet() {
		toSerialize["end_time"] = o.EndTime.Get()
	}
	toSerialize["status"] = o.Status
	if o.Duration.IsSet() {
		toSerialize["duration"] = o.Duration.Get()
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Attachments) {
		toSerialize["attachments"] = o.Attachments
	}
	return toSerialize, nil
}

func (o *ResultStepExecution) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResultStepExecution := _ResultStepExecution{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResultStepExecution)

	if err != nil {
		return err
	}

	*o = ResultStepExecution(varResultStepExecution)

	return err
}

type NullableResultStepExecution struct {
	value *ResultStepExecution
	isSet bool
}

func (v NullableResultStepExecution) Get() *ResultStepExecution {
	return v.value
}

func (v *NullableResultStepExecution) Set(val *ResultStepExecution) {
	v.value = val
	v.isSet = true
}

func (v NullableResultStepExecution) IsSet() bool {
	return v.isSet
}

func (v *NullableResultStepExecution) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResultStepExecution(val *ResultStepExecution) *NullableResultStepExecution {
	return &NullableResultStepExecution{value: val, isSet: true}
}

func (v NullableResultStepExecution) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResultStepExecution) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
