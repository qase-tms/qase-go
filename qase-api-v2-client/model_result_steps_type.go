/*
Qase.io TestOps API v2

Qase TestOps API v2 Specification.

API version: 2.0.0
Contact: support@qase.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2_client

import (
	"encoding/json"
	"fmt"
)

// ResultStepsType the model 'ResultStepsType'
type ResultStepsType string

// List of ResultStepsType
const (
	CLASSIC ResultStepsType = "classic"
	GHERKIN ResultStepsType = "gherkin"
)

// All allowed values of ResultStepsType enum
var AllowedResultStepsTypeEnumValues = []ResultStepsType{
	"classic",
	"gherkin",
}

func (v *ResultStepsType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ResultStepsType(value)
	for _, existing := range AllowedResultStepsTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ResultStepsType", value)
}

// NewResultStepsTypeFromValue returns a pointer to a valid ResultStepsType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewResultStepsTypeFromValue(v string) (*ResultStepsType, error) {
	ev := ResultStepsType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ResultStepsType: valid values are %v", v, AllowedResultStepsTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ResultStepsType) IsValid() bool {
	for _, existing := range AllowedResultStepsTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ResultStepsType value
func (v ResultStepsType) Ptr() *ResultStepsType {
	return &v
}

type NullableResultStepsType struct {
	value *ResultStepsType
	isSet bool
}

func (v NullableResultStepsType) Get() *ResultStepsType {
	return v.value
}

func (v *NullableResultStepsType) Set(val *ResultStepsType) {
	v.value = val
	v.isSet = true
}

func (v NullableResultStepsType) IsSet() bool {
	return v.isSet
}

func (v *NullableResultStepsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResultStepsType(val *ResultStepsType) *NullableResultStepsType {
	return &NullableResultStepsType{value: val, isSet: true}
}

func (v NullableResultStepsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResultStepsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
