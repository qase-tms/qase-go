/*
Qase.io TestOps API v2

Qase TestOps API v2 Specification.

API version: 2.0.0
Contact: support@qase.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2_client

import (
	"encoding/json"
)

// checks if the ResultStep type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResultStep{}

// ResultStep struct for ResultStep
type ResultStep struct {
	Data      *ResultStepData      `json:"data,omitempty"`
	Execution *ResultStepExecution `json:"execution,omitempty"`
	// Nested steps will be here. The same structure is used for them.
	Steps []map[string]interface{} `json:"steps,omitempty"`
}

// NewResultStep instantiates a new ResultStep object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResultStep() *ResultStep {
	this := ResultStep{}
	return &this
}

// NewResultStepWithDefaults instantiates a new ResultStep object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResultStepWithDefaults() *ResultStep {
	this := ResultStep{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ResultStep) GetData() ResultStepData {
	if o == nil || IsNil(o.Data) {
		var ret ResultStepData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultStep) GetDataOk() (*ResultStepData, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ResultStep) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given ResultStepData and assigns it to the Data field.
func (o *ResultStep) SetData(v ResultStepData) {
	o.Data = &v
}

// GetExecution returns the Execution field value if set, zero value otherwise.
func (o *ResultStep) GetExecution() ResultStepExecution {
	if o == nil || IsNil(o.Execution) {
		var ret ResultStepExecution
		return ret
	}
	return *o.Execution
}

// GetExecutionOk returns a tuple with the Execution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultStep) GetExecutionOk() (*ResultStepExecution, bool) {
	if o == nil || IsNil(o.Execution) {
		return nil, false
	}
	return o.Execution, true
}

// HasExecution returns a boolean if a field has been set.
func (o *ResultStep) HasExecution() bool {
	if o != nil && !IsNil(o.Execution) {
		return true
	}

	return false
}

// SetExecution gets a reference to the given ResultStepExecution and assigns it to the Execution field.
func (o *ResultStep) SetExecution(v ResultStepExecution) {
	o.Execution = &v
}

// GetSteps returns the Steps field value if set, zero value otherwise.
func (o *ResultStep) GetSteps() []map[string]interface{} {
	if o == nil || IsNil(o.Steps) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Steps
}

// GetStepsOk returns a tuple with the Steps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultStep) GetStepsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Steps) {
		return nil, false
	}
	return o.Steps, true
}

// HasSteps returns a boolean if a field has been set.
func (o *ResultStep) HasSteps() bool {
	if o != nil && !IsNil(o.Steps) {
		return true
	}

	return false
}

// SetSteps gets a reference to the given []map[string]interface{} and assigns it to the Steps field.
func (o *ResultStep) SetSteps(v []map[string]interface{}) {
	o.Steps = v
}

func (o ResultStep) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResultStep) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Execution) {
		toSerialize["execution"] = o.Execution
	}
	if !IsNil(o.Steps) {
		toSerialize["steps"] = o.Steps
	}
	return toSerialize, nil
}

type NullableResultStep struct {
	value *ResultStep
	isSet bool
}

func (v NullableResultStep) Get() *ResultStep {
	return v.value
}

func (v *NullableResultStep) Set(val *ResultStep) {
	v.value = val
	v.isSet = true
}

func (v NullableResultStep) IsSet() bool {
	return v.isSet
}

func (v *NullableResultStep) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResultStep(val *ResultStep) *NullableResultStep {
	return &NullableResultStep{value: val, isSet: true}
}

func (v NullableResultStep) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResultStep) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
