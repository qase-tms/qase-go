/*
Qase.io TestOps API v2

Qase TestOps API v2 Specification.

API version: 2.0.0
Contact: support@qase.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2_client

import (
	"encoding/json"
)

// checks if the BaseErrorResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BaseErrorResponse{}

// BaseErrorResponse struct for BaseErrorResponse
type BaseErrorResponse struct {
	ErrorMessage *string `json:"errorMessage,omitempty"`
}

// NewBaseErrorResponse instantiates a new BaseErrorResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseErrorResponse() *BaseErrorResponse {
	this := BaseErrorResponse{}
	return &this
}

// NewBaseErrorResponseWithDefaults instantiates a new BaseErrorResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseErrorResponseWithDefaults() *BaseErrorResponse {
	this := BaseErrorResponse{}
	return &this
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise.
func (o *BaseErrorResponse) GetErrorMessage() string {
	if o == nil || IsNil(o.ErrorMessage) {
		var ret string
		return ret
	}
	return *o.ErrorMessage
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseErrorResponse) GetErrorMessageOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorMessage) {
		return nil, false
	}
	return o.ErrorMessage, true
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *BaseErrorResponse) HasErrorMessage() bool {
	if o != nil && !IsNil(o.ErrorMessage) {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given string and assigns it to the ErrorMessage field.
func (o *BaseErrorResponse) SetErrorMessage(v string) {
	o.ErrorMessage = &v
}

func (o BaseErrorResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BaseErrorResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ErrorMessage) {
		toSerialize["errorMessage"] = o.ErrorMessage
	}
	return toSerialize, nil
}

type NullableBaseErrorResponse struct {
	value *BaseErrorResponse
	isSet bool
}

func (v NullableBaseErrorResponse) Get() *BaseErrorResponse {
	return v.value
}

func (v *NullableBaseErrorResponse) Set(val *BaseErrorResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseErrorResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseErrorResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseErrorResponse(val *BaseErrorResponse) *NullableBaseErrorResponse {
	return &NullableBaseErrorResponse{value: val, isSet: true}
}

func (v NullableBaseErrorResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseErrorResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
