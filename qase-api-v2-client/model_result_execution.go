/*
Qase.io TestOps API v2

Qase TestOps API v2 Specification.

API version: 2.0.0
Contact: support@qase.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2_client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ResultExecution type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResultExecution{}

// ResultExecution struct for ResultExecution
type ResultExecution struct {
	// Unix epoch time in seconds (whole part) and milliseconds (fractional part).
	StartTime NullableFloat64 `json:"start_time,omitempty"`
	// Unix epoch time in seconds (whole part) and milliseconds (fractional part).
	EndTime NullableFloat64 `json:"end_time,omitempty"`
	// Can have the following values passed, failed, blocked, skipped, invalid + custom statuses
	Status string `json:"status"`
	// Duration of the test execution in milliseconds.
	Duration   NullableInt64  `json:"duration,omitempty"`
	Stacktrace NullableString `json:"stacktrace,omitempty"`
	Thread     NullableString `json:"thread,omitempty"`
}

type _ResultExecution ResultExecution

// NewResultExecution instantiates a new ResultExecution object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResultExecution(status string) *ResultExecution {
	this := ResultExecution{}
	this.Status = status
	return &this
}

// NewResultExecutionWithDefaults instantiates a new ResultExecution object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResultExecutionWithDefaults() *ResultExecution {
	this := ResultExecution{}
	return &this
}

// GetStartTime returns the StartTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResultExecution) GetStartTime() float64 {
	if o == nil || IsNil(o.StartTime.Get()) {
		var ret float64
		return ret
	}
	return *o.StartTime.Get()
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResultExecution) GetStartTimeOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartTime.Get(), o.StartTime.IsSet()
}

// HasStartTime returns a boolean if a field has been set.
func (o *ResultExecution) HasStartTime() bool {
	if o != nil && o.StartTime.IsSet() {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given NullableFloat64 and assigns it to the StartTime field.
func (o *ResultExecution) SetStartTime(v float64) {
	o.StartTime.Set(&v)
}

// SetStartTimeNil sets the value for StartTime to be an explicit nil
func (o *ResultExecution) SetStartTimeNil() {
	o.StartTime.Set(nil)
}

// UnsetStartTime ensures that no value is present for StartTime, not even an explicit nil
func (o *ResultExecution) UnsetStartTime() {
	o.StartTime.Unset()
}

// GetEndTime returns the EndTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResultExecution) GetEndTime() float64 {
	if o == nil || IsNil(o.EndTime.Get()) {
		var ret float64
		return ret
	}
	return *o.EndTime.Get()
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResultExecution) GetEndTimeOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.EndTime.Get(), o.EndTime.IsSet()
}

// HasEndTime returns a boolean if a field has been set.
func (o *ResultExecution) HasEndTime() bool {
	if o != nil && o.EndTime.IsSet() {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given NullableFloat64 and assigns it to the EndTime field.
func (o *ResultExecution) SetEndTime(v float64) {
	o.EndTime.Set(&v)
}

// SetEndTimeNil sets the value for EndTime to be an explicit nil
func (o *ResultExecution) SetEndTimeNil() {
	o.EndTime.Set(nil)
}

// UnsetEndTime ensures that no value is present for EndTime, not even an explicit nil
func (o *ResultExecution) UnsetEndTime() {
	o.EndTime.Unset()
}

// GetStatus returns the Status field value
func (o *ResultExecution) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ResultExecution) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ResultExecution) SetStatus(v string) {
	o.Status = v
}

// GetDuration returns the Duration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResultExecution) GetDuration() int64 {
	if o == nil || IsNil(o.Duration.Get()) {
		var ret int64
		return ret
	}
	return *o.Duration.Get()
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResultExecution) GetDurationOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Duration.Get(), o.Duration.IsSet()
}

// HasDuration returns a boolean if a field has been set.
func (o *ResultExecution) HasDuration() bool {
	if o != nil && o.Duration.IsSet() {
		return true
	}

	return false
}

// SetDuration gets a reference to the given NullableInt64 and assigns it to the Duration field.
func (o *ResultExecution) SetDuration(v int64) {
	o.Duration.Set(&v)
}

// SetDurationNil sets the value for Duration to be an explicit nil
func (o *ResultExecution) SetDurationNil() {
	o.Duration.Set(nil)
}

// UnsetDuration ensures that no value is present for Duration, not even an explicit nil
func (o *ResultExecution) UnsetDuration() {
	o.Duration.Unset()
}

// GetStacktrace returns the Stacktrace field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResultExecution) GetStacktrace() string {
	if o == nil || IsNil(o.Stacktrace.Get()) {
		var ret string
		return ret
	}
	return *o.Stacktrace.Get()
}

// GetStacktraceOk returns a tuple with the Stacktrace field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResultExecution) GetStacktraceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Stacktrace.Get(), o.Stacktrace.IsSet()
}

// HasStacktrace returns a boolean if a field has been set.
func (o *ResultExecution) HasStacktrace() bool {
	if o != nil && o.Stacktrace.IsSet() {
		return true
	}

	return false
}

// SetStacktrace gets a reference to the given NullableString and assigns it to the Stacktrace field.
func (o *ResultExecution) SetStacktrace(v string) {
	o.Stacktrace.Set(&v)
}

// SetStacktraceNil sets the value for Stacktrace to be an explicit nil
func (o *ResultExecution) SetStacktraceNil() {
	o.Stacktrace.Set(nil)
}

// UnsetStacktrace ensures that no value is present for Stacktrace, not even an explicit nil
func (o *ResultExecution) UnsetStacktrace() {
	o.Stacktrace.Unset()
}

// GetThread returns the Thread field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResultExecution) GetThread() string {
	if o == nil || IsNil(o.Thread.Get()) {
		var ret string
		return ret
	}
	return *o.Thread.Get()
}

// GetThreadOk returns a tuple with the Thread field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResultExecution) GetThreadOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Thread.Get(), o.Thread.IsSet()
}

// HasThread returns a boolean if a field has been set.
func (o *ResultExecution) HasThread() bool {
	if o != nil && o.Thread.IsSet() {
		return true
	}

	return false
}

// SetThread gets a reference to the given NullableString and assigns it to the Thread field.
func (o *ResultExecution) SetThread(v string) {
	o.Thread.Set(&v)
}

// SetThreadNil sets the value for Thread to be an explicit nil
func (o *ResultExecution) SetThreadNil() {
	o.Thread.Set(nil)
}

// UnsetThread ensures that no value is present for Thread, not even an explicit nil
func (o *ResultExecution) UnsetThread() {
	o.Thread.Unset()
}

func (o ResultExecution) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResultExecution) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.StartTime.IsSet() {
		toSerialize["start_time"] = o.StartTime.Get()
	}
	if o.EndTime.IsSet() {
		toSerialize["end_time"] = o.EndTime.Get()
	}
	toSerialize["status"] = o.Status
	if o.Duration.IsSet() {
		toSerialize["duration"] = o.Duration.Get()
	}
	if o.Stacktrace.IsSet() {
		toSerialize["stacktrace"] = o.Stacktrace.Get()
	}
	if o.Thread.IsSet() {
		toSerialize["thread"] = o.Thread.Get()
	}
	return toSerialize, nil
}

func (o *ResultExecution) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResultExecution := _ResultExecution{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResultExecution)

	if err != nil {
		return err
	}

	*o = ResultExecution(varResultExecution)

	return err
}

type NullableResultExecution struct {
	value *ResultExecution
	isSet bool
}

func (v NullableResultExecution) Get() *ResultExecution {
	return v.value
}

func (v *NullableResultExecution) Set(val *ResultExecution) {
	v.value = val
	v.isSet = true
}

func (v NullableResultExecution) IsSet() bool {
	return v.isSet
}

func (v *NullableResultExecution) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResultExecution(val *ResultExecution) *NullableResultExecution {
	return &NullableResultExecution{value: val, isSet: true}
}

func (v NullableResultExecution) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResultExecution) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
