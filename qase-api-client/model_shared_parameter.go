/*
Qase.io TestOps API v1

Qase TestOps API v1 Specification.

API version: 1.0.0
Contact: support@qase.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v1_client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SharedParameter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SharedParameter{}

// SharedParameter struct for SharedParameter
type SharedParameter struct {
	Id                      string                   `json:"id"`
	Title                   string                   `json:"title"`
	Type                    string                   `json:"type"`
	ProjectCodes            []string                 `json:"project_codes"`
	IsEnabledForAllProjects bool                     `json:"is_enabled_for_all_projects"`
	Parameters              SharedParameterParameter `json:"parameters"`
}

type _SharedParameter SharedParameter

// NewSharedParameter instantiates a new SharedParameter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSharedParameter(id string, title string, type_ string, projectCodes []string, isEnabledForAllProjects bool, parameters SharedParameterParameter) *SharedParameter {
	this := SharedParameter{}
	this.Id = id
	this.Title = title
	this.Type = type_
	this.ProjectCodes = projectCodes
	this.IsEnabledForAllProjects = isEnabledForAllProjects
	this.Parameters = parameters
	return &this
}

// NewSharedParameterWithDefaults instantiates a new SharedParameter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSharedParameterWithDefaults() *SharedParameter {
	this := SharedParameter{}
	return &this
}

// GetId returns the Id field value
func (o *SharedParameter) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SharedParameter) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SharedParameter) SetId(v string) {
	o.Id = v
}

// GetTitle returns the Title field value
func (o *SharedParameter) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *SharedParameter) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *SharedParameter) SetTitle(v string) {
	o.Title = v
}

// GetType returns the Type field value
func (o *SharedParameter) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SharedParameter) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SharedParameter) SetType(v string) {
	o.Type = v
}

// GetProjectCodes returns the ProjectCodes field value
func (o *SharedParameter) GetProjectCodes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ProjectCodes
}

// GetProjectCodesOk returns a tuple with the ProjectCodes field value
// and a boolean to check if the value has been set.
func (o *SharedParameter) GetProjectCodesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProjectCodes, true
}

// SetProjectCodes sets field value
func (o *SharedParameter) SetProjectCodes(v []string) {
	o.ProjectCodes = v
}

// GetIsEnabledForAllProjects returns the IsEnabledForAllProjects field value
func (o *SharedParameter) GetIsEnabledForAllProjects() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsEnabledForAllProjects
}

// GetIsEnabledForAllProjectsOk returns a tuple with the IsEnabledForAllProjects field value
// and a boolean to check if the value has been set.
func (o *SharedParameter) GetIsEnabledForAllProjectsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsEnabledForAllProjects, true
}

// SetIsEnabledForAllProjects sets field value
func (o *SharedParameter) SetIsEnabledForAllProjects(v bool) {
	o.IsEnabledForAllProjects = v
}

// GetParameters returns the Parameters field value
func (o *SharedParameter) GetParameters() SharedParameterParameter {
	if o == nil {
		var ret SharedParameterParameter
		return ret
	}

	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value
// and a boolean to check if the value has been set.
func (o *SharedParameter) GetParametersOk() (*SharedParameterParameter, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Parameters, true
}

// SetParameters sets field value
func (o *SharedParameter) SetParameters(v SharedParameterParameter) {
	o.Parameters = v
}

func (o SharedParameter) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SharedParameter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["title"] = o.Title
	toSerialize["type"] = o.Type
	toSerialize["project_codes"] = o.ProjectCodes
	toSerialize["is_enabled_for_all_projects"] = o.IsEnabledForAllProjects
	toSerialize["parameters"] = o.Parameters
	return toSerialize, nil
}

func (o *SharedParameter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"title",
		"type",
		"project_codes",
		"is_enabled_for_all_projects",
		"parameters",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSharedParameter := _SharedParameter{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSharedParameter)

	if err != nil {
		return err
	}

	*o = SharedParameter(varSharedParameter)

	return err
}

type NullableSharedParameter struct {
	value *SharedParameter
	isSet bool
}

func (v NullableSharedParameter) Get() *SharedParameter {
	return v.value
}

func (v *NullableSharedParameter) Set(val *SharedParameter) {
	v.value = val
	v.isSet = true
}

func (v NullableSharedParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableSharedParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSharedParameter(val *SharedParameter) *NullableSharedParameter {
	return &NullableSharedParameter{value: val, isSet: true}
}

func (v NullableSharedParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSharedParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
