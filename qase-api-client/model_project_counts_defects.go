/*
Qase.io TestOps API v1

Qase TestOps API v1 Specification.

API version: 1.0.0
Contact: support@qase.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v1_client

import (
	"encoding/json"
)

// checks if the ProjectCountsDefects type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectCountsDefects{}

// ProjectCountsDefects struct for ProjectCountsDefects
type ProjectCountsDefects struct {
	Total *int32 `json:"total,omitempty"`
	Open  *int32 `json:"open,omitempty"`
}

// NewProjectCountsDefects instantiates a new ProjectCountsDefects object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectCountsDefects() *ProjectCountsDefects {
	this := ProjectCountsDefects{}
	return &this
}

// NewProjectCountsDefectsWithDefaults instantiates a new ProjectCountsDefects object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectCountsDefectsWithDefaults() *ProjectCountsDefects {
	this := ProjectCountsDefects{}
	return &this
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *ProjectCountsDefects) GetTotal() int32 {
	if o == nil || IsNil(o.Total) {
		var ret int32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectCountsDefects) GetTotalOk() (*int32, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *ProjectCountsDefects) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int32 and assigns it to the Total field.
func (o *ProjectCountsDefects) SetTotal(v int32) {
	o.Total = &v
}

// GetOpen returns the Open field value if set, zero value otherwise.
func (o *ProjectCountsDefects) GetOpen() int32 {
	if o == nil || IsNil(o.Open) {
		var ret int32
		return ret
	}
	return *o.Open
}

// GetOpenOk returns a tuple with the Open field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectCountsDefects) GetOpenOk() (*int32, bool) {
	if o == nil || IsNil(o.Open) {
		return nil, false
	}
	return o.Open, true
}

// HasOpen returns a boolean if a field has been set.
func (o *ProjectCountsDefects) HasOpen() bool {
	if o != nil && !IsNil(o.Open) {
		return true
	}

	return false
}

// SetOpen gets a reference to the given int32 and assigns it to the Open field.
func (o *ProjectCountsDefects) SetOpen(v int32) {
	o.Open = &v
}

func (o ProjectCountsDefects) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectCountsDefects) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	if !IsNil(o.Open) {
		toSerialize["open"] = o.Open
	}
	return toSerialize, nil
}

type NullableProjectCountsDefects struct {
	value *ProjectCountsDefects
	isSet bool
}

func (v NullableProjectCountsDefects) Get() *ProjectCountsDefects {
	return v.value
}

func (v *NullableProjectCountsDefects) Set(val *ProjectCountsDefects) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectCountsDefects) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectCountsDefects) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectCountsDefects(val *ProjectCountsDefects) *NullableProjectCountsDefects {
	return &NullableProjectCountsDefects{value: val, isSet: true}
}

func (v NullableProjectCountsDefects) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectCountsDefects) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
