/*
Qase.io TestOps API v1

Qase TestOps API v1 Specification.

API version: 1.0.0
Contact: support@qase.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v1_client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TestCaseParameterGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TestCaseParameterGroup{}

// TestCaseParameterGroup struct for TestCaseParameterGroup
type TestCaseParameterGroup struct {
	SharedId NullableString    `json:"shared_id,omitempty"`
	Type     string            `json:"type"`
	Items    []ParameterSingle `json:"items"`
}

type _TestCaseParameterGroup TestCaseParameterGroup

// NewTestCaseParameterGroup instantiates a new TestCaseParameterGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestCaseParameterGroup(type_ string, items []ParameterSingle) *TestCaseParameterGroup {
	this := TestCaseParameterGroup{}
	this.Type = type_
	this.Items = items
	return &this
}

// NewTestCaseParameterGroupWithDefaults instantiates a new TestCaseParameterGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestCaseParameterGroupWithDefaults() *TestCaseParameterGroup {
	this := TestCaseParameterGroup{}
	return &this
}

// GetSharedId returns the SharedId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestCaseParameterGroup) GetSharedId() string {
	if o == nil || IsNil(o.SharedId.Get()) {
		var ret string
		return ret
	}
	return *o.SharedId.Get()
}

// GetSharedIdOk returns a tuple with the SharedId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestCaseParameterGroup) GetSharedIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SharedId.Get(), o.SharedId.IsSet()
}

// HasSharedId returns a boolean if a field has been set.
func (o *TestCaseParameterGroup) HasSharedId() bool {
	if o != nil && o.SharedId.IsSet() {
		return true
	}

	return false
}

// SetSharedId gets a reference to the given NullableString and assigns it to the SharedId field.
func (o *TestCaseParameterGroup) SetSharedId(v string) {
	o.SharedId.Set(&v)
}

// SetSharedIdNil sets the value for SharedId to be an explicit nil
func (o *TestCaseParameterGroup) SetSharedIdNil() {
	o.SharedId.Set(nil)
}

// UnsetSharedId ensures that no value is present for SharedId, not even an explicit nil
func (o *TestCaseParameterGroup) UnsetSharedId() {
	o.SharedId.Unset()
}

// GetType returns the Type field value
func (o *TestCaseParameterGroup) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TestCaseParameterGroup) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TestCaseParameterGroup) SetType(v string) {
	o.Type = v
}

// GetItems returns the Items field value
func (o *TestCaseParameterGroup) GetItems() []ParameterSingle {
	if o == nil {
		var ret []ParameterSingle
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *TestCaseParameterGroup) GetItemsOk() ([]ParameterSingle, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *TestCaseParameterGroup) SetItems(v []ParameterSingle) {
	o.Items = v
}

func (o TestCaseParameterGroup) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestCaseParameterGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.SharedId.IsSet() {
		toSerialize["shared_id"] = o.SharedId.Get()
	}
	toSerialize["type"] = o.Type
	toSerialize["items"] = o.Items
	return toSerialize, nil
}

func (o *TestCaseParameterGroup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"items",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTestCaseParameterGroup := _TestCaseParameterGroup{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTestCaseParameterGroup)

	if err != nil {
		return err
	}

	*o = TestCaseParameterGroup(varTestCaseParameterGroup)

	return err
}

type NullableTestCaseParameterGroup struct {
	value *TestCaseParameterGroup
	isSet bool
}

func (v NullableTestCaseParameterGroup) Get() *TestCaseParameterGroup {
	return v.value
}

func (v *NullableTestCaseParameterGroup) Set(val *TestCaseParameterGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableTestCaseParameterGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableTestCaseParameterGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestCaseParameterGroup(val *TestCaseParameterGroup) *NullableTestCaseParameterGroup {
	return &NullableTestCaseParameterGroup{value: val, isSet: true}
}

func (v NullableTestCaseParameterGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestCaseParameterGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
