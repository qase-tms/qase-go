/*
Qase.io TestOps API v1

Qase TestOps API v1 Specification.

API version: 1.0.0
Contact: support@qase.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v1_client

import (
	"encoding/json"
)

// checks if the ExternalIssue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExternalIssue{}

// ExternalIssue struct for ExternalIssue
type ExternalIssue struct {
	Type   *string                    `json:"type,omitempty"`
	Issues []ExternalIssueIssuesInner `json:"issues,omitempty"`
}

// NewExternalIssue instantiates a new ExternalIssue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExternalIssue() *ExternalIssue {
	this := ExternalIssue{}
	return &this
}

// NewExternalIssueWithDefaults instantiates a new ExternalIssue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExternalIssueWithDefaults() *ExternalIssue {
	this := ExternalIssue{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ExternalIssue) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalIssue) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ExternalIssue) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ExternalIssue) SetType(v string) {
	o.Type = &v
}

// GetIssues returns the Issues field value if set, zero value otherwise.
func (o *ExternalIssue) GetIssues() []ExternalIssueIssuesInner {
	if o == nil || IsNil(o.Issues) {
		var ret []ExternalIssueIssuesInner
		return ret
	}
	return o.Issues
}

// GetIssuesOk returns a tuple with the Issues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalIssue) GetIssuesOk() ([]ExternalIssueIssuesInner, bool) {
	if o == nil || IsNil(o.Issues) {
		return nil, false
	}
	return o.Issues, true
}

// HasIssues returns a boolean if a field has been set.
func (o *ExternalIssue) HasIssues() bool {
	if o != nil && !IsNil(o.Issues) {
		return true
	}

	return false
}

// SetIssues gets a reference to the given []ExternalIssueIssuesInner and assigns it to the Issues field.
func (o *ExternalIssue) SetIssues(v []ExternalIssueIssuesInner) {
	o.Issues = v
}

func (o ExternalIssue) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExternalIssue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Issues) {
		toSerialize["issues"] = o.Issues
	}
	return toSerialize, nil
}

type NullableExternalIssue struct {
	value *ExternalIssue
	isSet bool
}

func (v NullableExternalIssue) Get() *ExternalIssue {
	return v.value
}

func (v *NullableExternalIssue) Set(val *ExternalIssue) {
	v.value = val
	v.isSet = true
}

func (v NullableExternalIssue) IsSet() bool {
	return v.isSet
}

func (v *NullableExternalIssue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExternalIssue(val *ExternalIssue) *NullableExternalIssue {
	return &NullableExternalIssue{value: val, isSet: true}
}

func (v NullableExternalIssue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExternalIssue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
