/*
Qase.io TestOps API v1

Qase TestOps API v1 Specification.

API version: 1.0.0
Contact: support@qase.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v1_client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PlanCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlanCreate{}

// PlanCreate struct for PlanCreate
type PlanCreate struct {
	Title       string         `json:"title"`
	Description NullableString `json:"description,omitempty"`
	Cases       []int64        `json:"cases"`
}

type _PlanCreate PlanCreate

// NewPlanCreate instantiates a new PlanCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlanCreate(title string, cases []int64) *PlanCreate {
	this := PlanCreate{}
	this.Title = title
	this.Cases = cases
	return &this
}

// NewPlanCreateWithDefaults instantiates a new PlanCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlanCreateWithDefaults() *PlanCreate {
	this := PlanCreate{}
	return &this
}

// GetTitle returns the Title field value
func (o *PlanCreate) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *PlanCreate) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *PlanCreate) SetTitle(v string) {
	o.Title = v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlanCreate) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlanCreate) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *PlanCreate) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *PlanCreate) SetDescription(v string) {
	o.Description.Set(&v)
}

// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *PlanCreate) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *PlanCreate) UnsetDescription() {
	o.Description.Unset()
}

// GetCases returns the Cases field value
func (o *PlanCreate) GetCases() []int64 {
	if o == nil {
		var ret []int64
		return ret
	}

	return o.Cases
}

// GetCasesOk returns a tuple with the Cases field value
// and a boolean to check if the value has been set.
func (o *PlanCreate) GetCasesOk() ([]int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cases, true
}

// SetCases sets field value
func (o *PlanCreate) SetCases(v []int64) {
	o.Cases = v
}

func (o PlanCreate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlanCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["title"] = o.Title
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	toSerialize["cases"] = o.Cases
	return toSerialize, nil
}

func (o *PlanCreate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"title",
		"cases",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPlanCreate := _PlanCreate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPlanCreate)

	if err != nil {
		return err
	}

	*o = PlanCreate(varPlanCreate)

	return err
}

type NullablePlanCreate struct {
	value *PlanCreate
	isSet bool
}

func (v NullablePlanCreate) Get() *PlanCreate {
	return v.value
}

func (v *NullablePlanCreate) Set(val *PlanCreate) {
	v.value = val
	v.isSet = true
}

func (v NullablePlanCreate) IsSet() bool {
	return v.isSet
}

func (v *NullablePlanCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlanCreate(val *PlanCreate) *NullablePlanCreate {
	return &NullablePlanCreate{value: val, isSet: true}
}

func (v NullablePlanCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlanCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
