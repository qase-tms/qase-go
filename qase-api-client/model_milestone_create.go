/*
Qase.io TestOps API v1

Qase TestOps API v1 Specification.

API version: 1.0.0
Contact: support@qase.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v1_client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the MilestoneCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MilestoneCreate{}

// MilestoneCreate struct for MilestoneCreate
type MilestoneCreate struct {
	Title       string  `json:"title"`
	Description *string `json:"description,omitempty"`
	Status      *string `json:"status,omitempty"`
	// unix timestamp
	DueDate *int64 `json:"due_date,omitempty"`
}

type _MilestoneCreate MilestoneCreate

// NewMilestoneCreate instantiates a new MilestoneCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMilestoneCreate(title string) *MilestoneCreate {
	this := MilestoneCreate{}
	this.Title = title
	return &this
}

// NewMilestoneCreateWithDefaults instantiates a new MilestoneCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMilestoneCreateWithDefaults() *MilestoneCreate {
	this := MilestoneCreate{}
	return &this
}

// GetTitle returns the Title field value
func (o *MilestoneCreate) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *MilestoneCreate) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *MilestoneCreate) SetTitle(v string) {
	o.Title = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *MilestoneCreate) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MilestoneCreate) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *MilestoneCreate) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *MilestoneCreate) SetDescription(v string) {
	o.Description = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *MilestoneCreate) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MilestoneCreate) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *MilestoneCreate) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *MilestoneCreate) SetStatus(v string) {
	o.Status = &v
}

// GetDueDate returns the DueDate field value if set, zero value otherwise.
func (o *MilestoneCreate) GetDueDate() int64 {
	if o == nil || IsNil(o.DueDate) {
		var ret int64
		return ret
	}
	return *o.DueDate
}

// GetDueDateOk returns a tuple with the DueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MilestoneCreate) GetDueDateOk() (*int64, bool) {
	if o == nil || IsNil(o.DueDate) {
		return nil, false
	}
	return o.DueDate, true
}

// HasDueDate returns a boolean if a field has been set.
func (o *MilestoneCreate) HasDueDate() bool {
	if o != nil && !IsNil(o.DueDate) {
		return true
	}

	return false
}

// SetDueDate gets a reference to the given int64 and assigns it to the DueDate field.
func (o *MilestoneCreate) SetDueDate(v int64) {
	o.DueDate = &v
}

func (o MilestoneCreate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MilestoneCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["title"] = o.Title
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.DueDate) {
		toSerialize["due_date"] = o.DueDate
	}
	return toSerialize, nil
}

func (o *MilestoneCreate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"title",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMilestoneCreate := _MilestoneCreate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMilestoneCreate)

	if err != nil {
		return err
	}

	*o = MilestoneCreate(varMilestoneCreate)

	return err
}

type NullableMilestoneCreate struct {
	value *MilestoneCreate
	isSet bool
}

func (v NullableMilestoneCreate) Get() *MilestoneCreate {
	return v.value
}

func (v *NullableMilestoneCreate) Set(val *MilestoneCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableMilestoneCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableMilestoneCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMilestoneCreate(val *MilestoneCreate) *NullableMilestoneCreate {
	return &NullableMilestoneCreate{value: val, isSet: true}
}

func (v NullableMilestoneCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMilestoneCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
