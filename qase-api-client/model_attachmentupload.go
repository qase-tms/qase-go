/*
Qase.io TestOps API v1

Qase TestOps API v1 Specification.

API version: 1.0.0
Contact: support@qase.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v1_client

import (
	"encoding/json"
)

// checks if the Attachmentupload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Attachmentupload{}

// Attachmentupload struct for Attachmentupload
type Attachmentupload struct {
	Hash      *string `json:"hash,omitempty"`
	Filename  *string `json:"filename,omitempty"`
	Mime      *string `json:"mime,omitempty"`
	Extension *string `json:"extension,omitempty"`
	Url       *string `json:"url,omitempty"`
	Team      *string `json:"team,omitempty"`
}

// NewAttachmentupload instantiates a new Attachmentupload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttachmentupload() *Attachmentupload {
	this := Attachmentupload{}
	return &this
}

// NewAttachmentuploadWithDefaults instantiates a new Attachmentupload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttachmentuploadWithDefaults() *Attachmentupload {
	this := Attachmentupload{}
	return &this
}

// GetHash returns the Hash field value if set, zero value otherwise.
func (o *Attachmentupload) GetHash() string {
	if o == nil || IsNil(o.Hash) {
		var ret string
		return ret
	}
	return *o.Hash
}

// GetHashOk returns a tuple with the Hash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachmentupload) GetHashOk() (*string, bool) {
	if o == nil || IsNil(o.Hash) {
		return nil, false
	}
	return o.Hash, true
}

// HasHash returns a boolean if a field has been set.
func (o *Attachmentupload) HasHash() bool {
	if o != nil && !IsNil(o.Hash) {
		return true
	}

	return false
}

// SetHash gets a reference to the given string and assigns it to the Hash field.
func (o *Attachmentupload) SetHash(v string) {
	o.Hash = &v
}

// GetFilename returns the Filename field value if set, zero value otherwise.
func (o *Attachmentupload) GetFilename() string {
	if o == nil || IsNil(o.Filename) {
		var ret string
		return ret
	}
	return *o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachmentupload) GetFilenameOk() (*string, bool) {
	if o == nil || IsNil(o.Filename) {
		return nil, false
	}
	return o.Filename, true
}

// HasFilename returns a boolean if a field has been set.
func (o *Attachmentupload) HasFilename() bool {
	if o != nil && !IsNil(o.Filename) {
		return true
	}

	return false
}

// SetFilename gets a reference to the given string and assigns it to the Filename field.
func (o *Attachmentupload) SetFilename(v string) {
	o.Filename = &v
}

// GetMime returns the Mime field value if set, zero value otherwise.
func (o *Attachmentupload) GetMime() string {
	if o == nil || IsNil(o.Mime) {
		var ret string
		return ret
	}
	return *o.Mime
}

// GetMimeOk returns a tuple with the Mime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachmentupload) GetMimeOk() (*string, bool) {
	if o == nil || IsNil(o.Mime) {
		return nil, false
	}
	return o.Mime, true
}

// HasMime returns a boolean if a field has been set.
func (o *Attachmentupload) HasMime() bool {
	if o != nil && !IsNil(o.Mime) {
		return true
	}

	return false
}

// SetMime gets a reference to the given string and assigns it to the Mime field.
func (o *Attachmentupload) SetMime(v string) {
	o.Mime = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *Attachmentupload) GetExtension() string {
	if o == nil || IsNil(o.Extension) {
		var ret string
		return ret
	}
	return *o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachmentupload) GetExtensionOk() (*string, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *Attachmentupload) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given string and assigns it to the Extension field.
func (o *Attachmentupload) SetExtension(v string) {
	o.Extension = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *Attachmentupload) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachmentupload) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *Attachmentupload) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *Attachmentupload) SetUrl(v string) {
	o.Url = &v
}

// GetTeam returns the Team field value if set, zero value otherwise.
func (o *Attachmentupload) GetTeam() string {
	if o == nil || IsNil(o.Team) {
		var ret string
		return ret
	}
	return *o.Team
}

// GetTeamOk returns a tuple with the Team field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachmentupload) GetTeamOk() (*string, bool) {
	if o == nil || IsNil(o.Team) {
		return nil, false
	}
	return o.Team, true
}

// HasTeam returns a boolean if a field has been set.
func (o *Attachmentupload) HasTeam() bool {
	if o != nil && !IsNil(o.Team) {
		return true
	}

	return false
}

// SetTeam gets a reference to the given string and assigns it to the Team field.
func (o *Attachmentupload) SetTeam(v string) {
	o.Team = &v
}

func (o Attachmentupload) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Attachmentupload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Hash) {
		toSerialize["hash"] = o.Hash
	}
	if !IsNil(o.Filename) {
		toSerialize["filename"] = o.Filename
	}
	if !IsNil(o.Mime) {
		toSerialize["mime"] = o.Mime
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Team) {
		toSerialize["team"] = o.Team
	}
	return toSerialize, nil
}

type NullableAttachmentupload struct {
	value *Attachmentupload
	isSet bool
}

func (v NullableAttachmentupload) Get() *Attachmentupload {
	return v.value
}

func (v *NullableAttachmentupload) Set(val *Attachmentupload) {
	v.value = val
	v.isSet = true
}

func (v NullableAttachmentupload) IsSet() bool {
	return v.isSet
}

func (v *NullableAttachmentupload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttachmentupload(val *Attachmentupload) *NullableAttachmentupload {
	return &NullableAttachmentupload{value: val, isSet: true}
}

func (v NullableAttachmentupload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttachmentupload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
