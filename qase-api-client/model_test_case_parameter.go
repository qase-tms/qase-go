/*
Qase.io TestOps API v1

Qase TestOps API v1 Specification.

API version: 1.0.0
Contact: support@qase.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v1_client

import (
	"encoding/json"
	"fmt"
)

// TestCaseParameter - struct for TestCaseParameter
type TestCaseParameter struct {
	TestCaseParameterGroup  *TestCaseParameterGroup
	TestCaseParameterSingle *TestCaseParameterSingle
}

// TestCaseParameterGroupAsTestCaseParameter is a convenience function that returns TestCaseParameterGroup wrapped in TestCaseParameter
func TestCaseParameterGroupAsTestCaseParameter(v *TestCaseParameterGroup) TestCaseParameter {
	return TestCaseParameter{
		TestCaseParameterGroup: v,
	}
}

// TestCaseParameterSingleAsTestCaseParameter is a convenience function that returns TestCaseParameterSingle wrapped in TestCaseParameter
func TestCaseParameterSingleAsTestCaseParameter(v *TestCaseParameterSingle) TestCaseParameter {
	return TestCaseParameter{
		TestCaseParameterSingle: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *TestCaseParameter) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into TestCaseParameterGroup
	err = newStrictDecoder(data).Decode(&dst.TestCaseParameterGroup)
	if err == nil {
		jsonTestCaseParameterGroup, _ := json.Marshal(dst.TestCaseParameterGroup)
		if string(jsonTestCaseParameterGroup) == "{}" { // empty struct
			dst.TestCaseParameterGroup = nil
		} else {
			match++
		}
	} else {
		dst.TestCaseParameterGroup = nil
	}

	// try to unmarshal data into TestCaseParameterSingle
	err = newStrictDecoder(data).Decode(&dst.TestCaseParameterSingle)
	if err == nil {
		jsonTestCaseParameterSingle, _ := json.Marshal(dst.TestCaseParameterSingle)
		if string(jsonTestCaseParameterSingle) == "{}" { // empty struct
			dst.TestCaseParameterSingle = nil
		} else {
			match++
		}
	} else {
		dst.TestCaseParameterSingle = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.TestCaseParameterGroup = nil
		dst.TestCaseParameterSingle = nil

		return fmt.Errorf("data matches more than one schema in oneOf(TestCaseParameter)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(TestCaseParameter)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TestCaseParameter) MarshalJSON() ([]byte, error) {
	if src.TestCaseParameterGroup != nil {
		return json.Marshal(&src.TestCaseParameterGroup)
	}

	if src.TestCaseParameterSingle != nil {
		return json.Marshal(&src.TestCaseParameterSingle)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TestCaseParameter) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.TestCaseParameterGroup != nil {
		return obj.TestCaseParameterGroup
	}

	if obj.TestCaseParameterSingle != nil {
		return obj.TestCaseParameterSingle
	}

	// all schemas are nil
	return nil
}

type NullableTestCaseParameter struct {
	value *TestCaseParameter
	isSet bool
}

func (v NullableTestCaseParameter) Get() *TestCaseParameter {
	return v.value
}

func (v *NullableTestCaseParameter) Set(val *TestCaseParameter) {
	v.value = val
	v.isSet = true
}

func (v NullableTestCaseParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableTestCaseParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestCaseParameter(val *TestCaseParameter) *NullableTestCaseParameter {
	return &NullableTestCaseParameter{value: val, isSet: true}
}

func (v NullableTestCaseParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestCaseParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
