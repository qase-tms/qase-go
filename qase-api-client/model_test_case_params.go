/*
Qase.io TestOps API v1

Qase TestOps API v1 Specification.

API version: 1.0.0
Contact: support@qase.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v1_client

import (
	"encoding/json"
	"fmt"
)

// TestCaseParams Deprecated, use `parameters` instead.
type TestCaseParams struct {
	ArrayOfMapmapOfStringAny *[]map[string]interface{}
	MapmapOfStringAny        *map[string]interface{}
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *TestCaseParams) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into ArrayOfMapmapOfStringAny
	err = json.Unmarshal(data, &dst.ArrayOfMapmapOfStringAny)
	if err == nil {
		jsonArrayOfMapmapOfStringAny, _ := json.Marshal(dst.ArrayOfMapmapOfStringAny)
		if string(jsonArrayOfMapmapOfStringAny) == "{}" { // empty struct
			dst.ArrayOfMapmapOfStringAny = nil
		} else {
			return nil // data stored in dst.ArrayOfMapmapOfStringAny, return on the first match
		}
	} else {
		dst.ArrayOfMapmapOfStringAny = nil
	}

	// try to unmarshal JSON data into MapmapOfStringAny
	err = json.Unmarshal(data, &dst.MapmapOfStringAny)
	if err == nil {
		jsonMapmapOfStringAny, _ := json.Marshal(dst.MapmapOfStringAny)
		if string(jsonMapmapOfStringAny) == "{}" { // empty struct
			dst.MapmapOfStringAny = nil
		} else {
			return nil // data stored in dst.MapmapOfStringAny, return on the first match
		}
	} else {
		dst.MapmapOfStringAny = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(TestCaseParams)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TestCaseParams) MarshalJSON() ([]byte, error) {
	if src.ArrayOfMapmapOfStringAny != nil {
		return json.Marshal(&src.ArrayOfMapmapOfStringAny)
	}

	if src.MapmapOfStringAny != nil {
		return json.Marshal(&src.MapmapOfStringAny)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableTestCaseParams struct {
	value *TestCaseParams
	isSet bool
}

func (v NullableTestCaseParams) Get() *TestCaseParams {
	return v.value
}

func (v *NullableTestCaseParams) Set(val *TestCaseParams) {
	v.value = val
	v.isSet = true
}

func (v NullableTestCaseParams) IsSet() bool {
	return v.isSet
}

func (v *NullableTestCaseParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestCaseParams(val *TestCaseParams) *NullableTestCaseParams {
	return &NullableTestCaseParams{value: val, isSet: true}
}

func (v NullableTestCaseParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestCaseParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
