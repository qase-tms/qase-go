/*
Qase.io TestOps API v1

Qase TestOps API v1 Specification.

API version: 1.0.0
Contact: support@qase.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v1_client

import (
	"encoding/json"
	"time"
)

// checks if the PlanDetailed type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlanDetailed{}

// PlanDetailed struct for PlanDetailed
type PlanDetailed struct {
	Id          *int64         `json:"id,omitempty"`
	Title       *string        `json:"title,omitempty"`
	Description NullableString `json:"description,omitempty"`
	CasesCount  *int32         `json:"cases_count,omitempty"`
	CreatedAt   *time.Time     `json:"created_at,omitempty"`
	UpdatedAt   *time.Time     `json:"updated_at,omitempty"`
	// Deprecated, use the `created_at` property instead.
	// Deprecated
	Created *string `json:"created,omitempty"`
	// Deprecated, use the `updated_at` property instead.
	// Deprecated
	Updated     *string                  `json:"updated,omitempty"`
	AverageTime *float32                 `json:"average_time,omitempty"`
	Cases       []PlanDetailedAllOfCases `json:"cases,omitempty"`
}

// NewPlanDetailed instantiates a new PlanDetailed object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlanDetailed() *PlanDetailed {
	this := PlanDetailed{}
	return &this
}

// NewPlanDetailedWithDefaults instantiates a new PlanDetailed object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlanDetailedWithDefaults() *PlanDetailed {
	this := PlanDetailed{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PlanDetailed) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDetailed) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PlanDetailed) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *PlanDetailed) SetId(v int64) {
	o.Id = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *PlanDetailed) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDetailed) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *PlanDetailed) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *PlanDetailed) SetTitle(v string) {
	o.Title = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlanDetailed) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlanDetailed) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *PlanDetailed) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *PlanDetailed) SetDescription(v string) {
	o.Description.Set(&v)
}

// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *PlanDetailed) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *PlanDetailed) UnsetDescription() {
	o.Description.Unset()
}

// GetCasesCount returns the CasesCount field value if set, zero value otherwise.
func (o *PlanDetailed) GetCasesCount() int32 {
	if o == nil || IsNil(o.CasesCount) {
		var ret int32
		return ret
	}
	return *o.CasesCount
}

// GetCasesCountOk returns a tuple with the CasesCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDetailed) GetCasesCountOk() (*int32, bool) {
	if o == nil || IsNil(o.CasesCount) {
		return nil, false
	}
	return o.CasesCount, true
}

// HasCasesCount returns a boolean if a field has been set.
func (o *PlanDetailed) HasCasesCount() bool {
	if o != nil && !IsNil(o.CasesCount) {
		return true
	}

	return false
}

// SetCasesCount gets a reference to the given int32 and assigns it to the CasesCount field.
func (o *PlanDetailed) SetCasesCount(v int32) {
	o.CasesCount = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *PlanDetailed) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDetailed) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *PlanDetailed) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *PlanDetailed) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *PlanDetailed) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDetailed) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *PlanDetailed) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *PlanDetailed) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
// Deprecated
func (o *PlanDetailed) GetCreated() string {
	if o == nil || IsNil(o.Created) {
		var ret string
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *PlanDetailed) GetCreatedOk() (*string, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *PlanDetailed) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given string and assigns it to the Created field.
// Deprecated
func (o *PlanDetailed) SetCreated(v string) {
	o.Created = &v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
// Deprecated
func (o *PlanDetailed) GetUpdated() string {
	if o == nil || IsNil(o.Updated) {
		var ret string
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *PlanDetailed) GetUpdatedOk() (*string, bool) {
	if o == nil || IsNil(o.Updated) {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *PlanDetailed) HasUpdated() bool {
	if o != nil && !IsNil(o.Updated) {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given string and assigns it to the Updated field.
// Deprecated
func (o *PlanDetailed) SetUpdated(v string) {
	o.Updated = &v
}

// GetAverageTime returns the AverageTime field value if set, zero value otherwise.
func (o *PlanDetailed) GetAverageTime() float32 {
	if o == nil || IsNil(o.AverageTime) {
		var ret float32
		return ret
	}
	return *o.AverageTime
}

// GetAverageTimeOk returns a tuple with the AverageTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDetailed) GetAverageTimeOk() (*float32, bool) {
	if o == nil || IsNil(o.AverageTime) {
		return nil, false
	}
	return o.AverageTime, true
}

// HasAverageTime returns a boolean if a field has been set.
func (o *PlanDetailed) HasAverageTime() bool {
	if o != nil && !IsNil(o.AverageTime) {
		return true
	}

	return false
}

// SetAverageTime gets a reference to the given float32 and assigns it to the AverageTime field.
func (o *PlanDetailed) SetAverageTime(v float32) {
	o.AverageTime = &v
}

// GetCases returns the Cases field value if set, zero value otherwise.
func (o *PlanDetailed) GetCases() []PlanDetailedAllOfCases {
	if o == nil || IsNil(o.Cases) {
		var ret []PlanDetailedAllOfCases
		return ret
	}
	return o.Cases
}

// GetCasesOk returns a tuple with the Cases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDetailed) GetCasesOk() ([]PlanDetailedAllOfCases, bool) {
	if o == nil || IsNil(o.Cases) {
		return nil, false
	}
	return o.Cases, true
}

// HasCases returns a boolean if a field has been set.
func (o *PlanDetailed) HasCases() bool {
	if o != nil && !IsNil(o.Cases) {
		return true
	}

	return false
}

// SetCases gets a reference to the given []PlanDetailedAllOfCases and assigns it to the Cases field.
func (o *PlanDetailed) SetCases(v []PlanDetailedAllOfCases) {
	o.Cases = v
}

func (o PlanDetailed) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlanDetailed) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if !IsNil(o.CasesCount) {
		toSerialize["cases_count"] = o.CasesCount
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Updated) {
		toSerialize["updated"] = o.Updated
	}
	if !IsNil(o.AverageTime) {
		toSerialize["average_time"] = o.AverageTime
	}
	if !IsNil(o.Cases) {
		toSerialize["cases"] = o.Cases
	}
	return toSerialize, nil
}

type NullablePlanDetailed struct {
	value *PlanDetailed
	isSet bool
}

func (v NullablePlanDetailed) Get() *PlanDetailed {
	return v.value
}

func (v *NullablePlanDetailed) Set(val *PlanDetailed) {
	v.value = val
	v.isSet = true
}

func (v NullablePlanDetailed) IsSet() bool {
	return v.isSet
}

func (v *NullablePlanDetailed) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlanDetailed(val *PlanDetailed) *NullablePlanDetailed {
	return &NullablePlanDetailed{value: val, isSet: true}
}

func (v NullablePlanDetailed) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlanDetailed) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
