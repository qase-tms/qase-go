/*
Qase.io TestOps API v1

Qase TestOps API v1 Specification.

API version: 1.0.0
Contact: support@qase.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v1_client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TestCaseExternalIssuesLinksInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TestCaseExternalIssuesLinksInner{}

// TestCaseExternalIssuesLinksInner struct for TestCaseExternalIssuesLinksInner
type TestCaseExternalIssuesLinksInner struct {
	CaseId         int64    `json:"case_id"`
	ExternalIssues []string `json:"external_issues"`
}

type _TestCaseExternalIssuesLinksInner TestCaseExternalIssuesLinksInner

// NewTestCaseExternalIssuesLinksInner instantiates a new TestCaseExternalIssuesLinksInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestCaseExternalIssuesLinksInner(caseId int64, externalIssues []string) *TestCaseExternalIssuesLinksInner {
	this := TestCaseExternalIssuesLinksInner{}
	this.CaseId = caseId
	this.ExternalIssues = externalIssues
	return &this
}

// NewTestCaseExternalIssuesLinksInnerWithDefaults instantiates a new TestCaseExternalIssuesLinksInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestCaseExternalIssuesLinksInnerWithDefaults() *TestCaseExternalIssuesLinksInner {
	this := TestCaseExternalIssuesLinksInner{}
	return &this
}

// GetCaseId returns the CaseId field value
func (o *TestCaseExternalIssuesLinksInner) GetCaseId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CaseId
}

// GetCaseIdOk returns a tuple with the CaseId field value
// and a boolean to check if the value has been set.
func (o *TestCaseExternalIssuesLinksInner) GetCaseIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CaseId, true
}

// SetCaseId sets field value
func (o *TestCaseExternalIssuesLinksInner) SetCaseId(v int64) {
	o.CaseId = v
}

// GetExternalIssues returns the ExternalIssues field value
func (o *TestCaseExternalIssuesLinksInner) GetExternalIssues() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ExternalIssues
}

// GetExternalIssuesOk returns a tuple with the ExternalIssues field value
// and a boolean to check if the value has been set.
func (o *TestCaseExternalIssuesLinksInner) GetExternalIssuesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExternalIssues, true
}

// SetExternalIssues sets field value
func (o *TestCaseExternalIssuesLinksInner) SetExternalIssues(v []string) {
	o.ExternalIssues = v
}

func (o TestCaseExternalIssuesLinksInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestCaseExternalIssuesLinksInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["case_id"] = o.CaseId
	toSerialize["external_issues"] = o.ExternalIssues
	return toSerialize, nil
}

func (o *TestCaseExternalIssuesLinksInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"case_id",
		"external_issues",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTestCaseExternalIssuesLinksInner := _TestCaseExternalIssuesLinksInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTestCaseExternalIssuesLinksInner)

	if err != nil {
		return err
	}

	*o = TestCaseExternalIssuesLinksInner(varTestCaseExternalIssuesLinksInner)

	return err
}

type NullableTestCaseExternalIssuesLinksInner struct {
	value *TestCaseExternalIssuesLinksInner
	isSet bool
}

func (v NullableTestCaseExternalIssuesLinksInner) Get() *TestCaseExternalIssuesLinksInner {
	return v.value
}

func (v *NullableTestCaseExternalIssuesLinksInner) Set(val *TestCaseExternalIssuesLinksInner) {
	v.value = val
	v.isSet = true
}

func (v NullableTestCaseExternalIssuesLinksInner) IsSet() bool {
	return v.isSet
}

func (v *NullableTestCaseExternalIssuesLinksInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestCaseExternalIssuesLinksInner(val *TestCaseExternalIssuesLinksInner) *NullableTestCaseExternalIssuesLinksInner {
	return &NullableTestCaseExternalIssuesLinksInner{value: val, isSet: true}
}

func (v NullableTestCaseExternalIssuesLinksInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestCaseExternalIssuesLinksInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
