/*
Qase.io TestOps API v1

Qase TestOps API v1 Specification.

API version: 1.0.0
Contact: support@qase.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v1_client

import (
	"encoding/json"
)

// checks if the ResultCreateResponseAllOfResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResultCreateResponseAllOfResult{}

// ResultCreateResponseAllOfResult struct for ResultCreateResponseAllOfResult
type ResultCreateResponseAllOfResult struct {
	CaseId *int64  `json:"case_id,omitempty"`
	Hash   *string `json:"hash,omitempty"`
}

// NewResultCreateResponseAllOfResult instantiates a new ResultCreateResponseAllOfResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResultCreateResponseAllOfResult() *ResultCreateResponseAllOfResult {
	this := ResultCreateResponseAllOfResult{}
	return &this
}

// NewResultCreateResponseAllOfResultWithDefaults instantiates a new ResultCreateResponseAllOfResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResultCreateResponseAllOfResultWithDefaults() *ResultCreateResponseAllOfResult {
	this := ResultCreateResponseAllOfResult{}
	return &this
}

// GetCaseId returns the CaseId field value if set, zero value otherwise.
func (o *ResultCreateResponseAllOfResult) GetCaseId() int64 {
	if o == nil || IsNil(o.CaseId) {
		var ret int64
		return ret
	}
	return *o.CaseId
}

// GetCaseIdOk returns a tuple with the CaseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultCreateResponseAllOfResult) GetCaseIdOk() (*int64, bool) {
	if o == nil || IsNil(o.CaseId) {
		return nil, false
	}
	return o.CaseId, true
}

// HasCaseId returns a boolean if a field has been set.
func (o *ResultCreateResponseAllOfResult) HasCaseId() bool {
	if o != nil && !IsNil(o.CaseId) {
		return true
	}

	return false
}

// SetCaseId gets a reference to the given int64 and assigns it to the CaseId field.
func (o *ResultCreateResponseAllOfResult) SetCaseId(v int64) {
	o.CaseId = &v
}

// GetHash returns the Hash field value if set, zero value otherwise.
func (o *ResultCreateResponseAllOfResult) GetHash() string {
	if o == nil || IsNil(o.Hash) {
		var ret string
		return ret
	}
	return *o.Hash
}

// GetHashOk returns a tuple with the Hash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultCreateResponseAllOfResult) GetHashOk() (*string, bool) {
	if o == nil || IsNil(o.Hash) {
		return nil, false
	}
	return o.Hash, true
}

// HasHash returns a boolean if a field has been set.
func (o *ResultCreateResponseAllOfResult) HasHash() bool {
	if o != nil && !IsNil(o.Hash) {
		return true
	}

	return false
}

// SetHash gets a reference to the given string and assigns it to the Hash field.
func (o *ResultCreateResponseAllOfResult) SetHash(v string) {
	o.Hash = &v
}

func (o ResultCreateResponseAllOfResult) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResultCreateResponseAllOfResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CaseId) {
		toSerialize["case_id"] = o.CaseId
	}
	if !IsNil(o.Hash) {
		toSerialize["hash"] = o.Hash
	}
	return toSerialize, nil
}

type NullableResultCreateResponseAllOfResult struct {
	value *ResultCreateResponseAllOfResult
	isSet bool
}

func (v NullableResultCreateResponseAllOfResult) Get() *ResultCreateResponseAllOfResult {
	return v.value
}

func (v *NullableResultCreateResponseAllOfResult) Set(val *ResultCreateResponseAllOfResult) {
	v.value = val
	v.isSet = true
}

func (v NullableResultCreateResponseAllOfResult) IsSet() bool {
	return v.isSet
}

func (v *NullableResultCreateResponseAllOfResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResultCreateResponseAllOfResult(val *ResultCreateResponseAllOfResult) *NullableResultCreateResponseAllOfResult {
	return &NullableResultCreateResponseAllOfResult{value: val, isSet: true}
}

func (v NullableResultCreateResponseAllOfResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResultCreateResponseAllOfResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
