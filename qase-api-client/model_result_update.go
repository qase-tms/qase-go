/*
Qase.io TestOps API v1

Qase TestOps API v1 Specification.

API version: 1.0.0
Contact: support@qase.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v1_client

import (
	"encoding/json"
)

// checks if the ResultUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResultUpdate{}

// ResultUpdate struct for ResultUpdate
type ResultUpdate struct {
	Status      *string                `json:"status,omitempty"`
	TimeMs      NullableInt64          `json:"time_ms,omitempty"`
	Defect      NullableBool           `json:"defect,omitempty"`
	Attachments []string               `json:"attachments,omitempty"`
	Stacktrace  NullableString         `json:"stacktrace,omitempty"`
	Comment     NullableString         `json:"comment,omitempty"`
	Steps       []TestStepResultCreate `json:"steps,omitempty"`
}

// NewResultUpdate instantiates a new ResultUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResultUpdate() *ResultUpdate {
	this := ResultUpdate{}
	return &this
}

// NewResultUpdateWithDefaults instantiates a new ResultUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResultUpdateWithDefaults() *ResultUpdate {
	this := ResultUpdate{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ResultUpdate) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultUpdate) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ResultUpdate) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ResultUpdate) SetStatus(v string) {
	o.Status = &v
}

// GetTimeMs returns the TimeMs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResultUpdate) GetTimeMs() int64 {
	if o == nil || IsNil(o.TimeMs.Get()) {
		var ret int64
		return ret
	}
	return *o.TimeMs.Get()
}

// GetTimeMsOk returns a tuple with the TimeMs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResultUpdate) GetTimeMsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TimeMs.Get(), o.TimeMs.IsSet()
}

// HasTimeMs returns a boolean if a field has been set.
func (o *ResultUpdate) HasTimeMs() bool {
	if o != nil && o.TimeMs.IsSet() {
		return true
	}

	return false
}

// SetTimeMs gets a reference to the given NullableInt64 and assigns it to the TimeMs field.
func (o *ResultUpdate) SetTimeMs(v int64) {
	o.TimeMs.Set(&v)
}

// SetTimeMsNil sets the value for TimeMs to be an explicit nil
func (o *ResultUpdate) SetTimeMsNil() {
	o.TimeMs.Set(nil)
}

// UnsetTimeMs ensures that no value is present for TimeMs, not even an explicit nil
func (o *ResultUpdate) UnsetTimeMs() {
	o.TimeMs.Unset()
}

// GetDefect returns the Defect field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResultUpdate) GetDefect() bool {
	if o == nil || IsNil(o.Defect.Get()) {
		var ret bool
		return ret
	}
	return *o.Defect.Get()
}

// GetDefectOk returns a tuple with the Defect field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResultUpdate) GetDefectOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Defect.Get(), o.Defect.IsSet()
}

// HasDefect returns a boolean if a field has been set.
func (o *ResultUpdate) HasDefect() bool {
	if o != nil && o.Defect.IsSet() {
		return true
	}

	return false
}

// SetDefect gets a reference to the given NullableBool and assigns it to the Defect field.
func (o *ResultUpdate) SetDefect(v bool) {
	o.Defect.Set(&v)
}

// SetDefectNil sets the value for Defect to be an explicit nil
func (o *ResultUpdate) SetDefectNil() {
	o.Defect.Set(nil)
}

// UnsetDefect ensures that no value is present for Defect, not even an explicit nil
func (o *ResultUpdate) UnsetDefect() {
	o.Defect.Unset()
}

// GetAttachments returns the Attachments field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResultUpdate) GetAttachments() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Attachments
}

// GetAttachmentsOk returns a tuple with the Attachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResultUpdate) GetAttachmentsOk() ([]string, bool) {
	if o == nil || IsNil(o.Attachments) {
		return nil, false
	}
	return o.Attachments, true
}

// HasAttachments returns a boolean if a field has been set.
func (o *ResultUpdate) HasAttachments() bool {
	if o != nil && !IsNil(o.Attachments) {
		return true
	}

	return false
}

// SetAttachments gets a reference to the given []string and assigns it to the Attachments field.
func (o *ResultUpdate) SetAttachments(v []string) {
	o.Attachments = v
}

// GetStacktrace returns the Stacktrace field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResultUpdate) GetStacktrace() string {
	if o == nil || IsNil(o.Stacktrace.Get()) {
		var ret string
		return ret
	}
	return *o.Stacktrace.Get()
}

// GetStacktraceOk returns a tuple with the Stacktrace field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResultUpdate) GetStacktraceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Stacktrace.Get(), o.Stacktrace.IsSet()
}

// HasStacktrace returns a boolean if a field has been set.
func (o *ResultUpdate) HasStacktrace() bool {
	if o != nil && o.Stacktrace.IsSet() {
		return true
	}

	return false
}

// SetStacktrace gets a reference to the given NullableString and assigns it to the Stacktrace field.
func (o *ResultUpdate) SetStacktrace(v string) {
	o.Stacktrace.Set(&v)
}

// SetStacktraceNil sets the value for Stacktrace to be an explicit nil
func (o *ResultUpdate) SetStacktraceNil() {
	o.Stacktrace.Set(nil)
}

// UnsetStacktrace ensures that no value is present for Stacktrace, not even an explicit nil
func (o *ResultUpdate) UnsetStacktrace() {
	o.Stacktrace.Unset()
}

// GetComment returns the Comment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResultUpdate) GetComment() string {
	if o == nil || IsNil(o.Comment.Get()) {
		var ret string
		return ret
	}
	return *o.Comment.Get()
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResultUpdate) GetCommentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Comment.Get(), o.Comment.IsSet()
}

// HasComment returns a boolean if a field has been set.
func (o *ResultUpdate) HasComment() bool {
	if o != nil && o.Comment.IsSet() {
		return true
	}

	return false
}

// SetComment gets a reference to the given NullableString and assigns it to the Comment field.
func (o *ResultUpdate) SetComment(v string) {
	o.Comment.Set(&v)
}

// SetCommentNil sets the value for Comment to be an explicit nil
func (o *ResultUpdate) SetCommentNil() {
	o.Comment.Set(nil)
}

// UnsetComment ensures that no value is present for Comment, not even an explicit nil
func (o *ResultUpdate) UnsetComment() {
	o.Comment.Unset()
}

// GetSteps returns the Steps field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResultUpdate) GetSteps() []TestStepResultCreate {
	if o == nil {
		var ret []TestStepResultCreate
		return ret
	}
	return o.Steps
}

// GetStepsOk returns a tuple with the Steps field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResultUpdate) GetStepsOk() ([]TestStepResultCreate, bool) {
	if o == nil || IsNil(o.Steps) {
		return nil, false
	}
	return o.Steps, true
}

// HasSteps returns a boolean if a field has been set.
func (o *ResultUpdate) HasSteps() bool {
	if o != nil && !IsNil(o.Steps) {
		return true
	}

	return false
}

// SetSteps gets a reference to the given []TestStepResultCreate and assigns it to the Steps field.
func (o *ResultUpdate) SetSteps(v []TestStepResultCreate) {
	o.Steps = v
}

func (o ResultUpdate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResultUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if o.TimeMs.IsSet() {
		toSerialize["time_ms"] = o.TimeMs.Get()
	}
	if o.Defect.IsSet() {
		toSerialize["defect"] = o.Defect.Get()
	}
	if o.Attachments != nil {
		toSerialize["attachments"] = o.Attachments
	}
	if o.Stacktrace.IsSet() {
		toSerialize["stacktrace"] = o.Stacktrace.Get()
	}
	if o.Comment.IsSet() {
		toSerialize["comment"] = o.Comment.Get()
	}
	if o.Steps != nil {
		toSerialize["steps"] = o.Steps
	}
	return toSerialize, nil
}

type NullableResultUpdate struct {
	value *ResultUpdate
	isSet bool
}

func (v NullableResultUpdate) Get() *ResultUpdate {
	return v.value
}

func (v *NullableResultUpdate) Set(val *ResultUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableResultUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableResultUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResultUpdate(val *ResultUpdate) *NullableResultUpdate {
	return &NullableResultUpdate{value: val, isSet: true}
}

func (v NullableResultUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResultUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
