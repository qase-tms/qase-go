/*
Qase.io TestOps API v1

Qase TestOps API v1 Specification.

API version: 1.0.0
Contact: support@qase.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v1_client

import (
	"encoding/json"
	"fmt"

	"gopkg.in/validator.v2"
)

// SharedParameterParameter - struct for SharedParameterParameter
type SharedParameterParameter struct {
	ArrayOfParameterSingle *[]ParameterSingle
}

// []ParameterSingleAsSharedParameterParameter is a convenience function that returns []ParameterSingle wrapped in SharedParameterParameter
func ArrayOfParameterSingleAsSharedParameterParameter(v *[]ParameterSingle) SharedParameterParameter {
	return SharedParameterParameter{
		ArrayOfParameterSingle: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *SharedParameterParameter) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ArrayOfParameterSingle
	err = newStrictDecoder(data).Decode(&dst.ArrayOfParameterSingle)
	if err == nil {
		jsonArrayOfParameterSingle, _ := json.Marshal(dst.ArrayOfParameterSingle)
		if string(jsonArrayOfParameterSingle) == "{}" { // empty struct
			dst.ArrayOfParameterSingle = nil
		} else {
			if err = validator.Validate(dst.ArrayOfParameterSingle); err != nil {
				dst.ArrayOfParameterSingle = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfParameterSingle = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ArrayOfParameterSingle = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SharedParameterParameter)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SharedParameterParameter)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SharedParameterParameter) MarshalJSON() ([]byte, error) {
	if src.ArrayOfParameterSingle != nil {
		return json.Marshal(&src.ArrayOfParameterSingle)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SharedParameterParameter) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ArrayOfParameterSingle != nil {
		return obj.ArrayOfParameterSingle
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj SharedParameterParameter) GetActualInstanceValue() interface{} {
	if obj.ArrayOfParameterSingle != nil {
		return *obj.ArrayOfParameterSingle
	}

	// all schemas are nil
	return nil
}

type NullableSharedParameterParameter struct {
	value *SharedParameterParameter
	isSet bool
}

func (v NullableSharedParameterParameter) Get() *SharedParameterParameter {
	return v.value
}

func (v *NullableSharedParameterParameter) Set(val *SharedParameterParameter) {
	v.value = val
	v.isSet = true
}

func (v NullableSharedParameterParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableSharedParameterParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSharedParameterParameter(val *SharedParameterParameter) *NullableSharedParameterParameter {
	return &NullableSharedParameterParameter{value: val, isSet: true}
}

func (v NullableSharedParameterParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSharedParameterParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
