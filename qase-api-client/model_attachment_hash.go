/*
Qase.io TestOps API v1

Qase TestOps API v1 Specification.

API version: 1.0.0
Contact: support@qase.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v1_client

import (
	"encoding/json"
)

// checks if the AttachmentHash type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AttachmentHash{}

// AttachmentHash struct for AttachmentHash
type AttachmentHash struct {
	Size     *int32  `json:"size,omitempty"`
	Mime     *string `json:"mime,omitempty"`
	Filename *string `json:"filename,omitempty"`
	Url      *string `json:"url,omitempty"`
	Hash     *string `json:"hash,omitempty"`
}

// NewAttachmentHash instantiates a new AttachmentHash object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttachmentHash() *AttachmentHash {
	this := AttachmentHash{}
	return &this
}

// NewAttachmentHashWithDefaults instantiates a new AttachmentHash object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttachmentHashWithDefaults() *AttachmentHash {
	this := AttachmentHash{}
	return &this
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *AttachmentHash) GetSize() int32 {
	if o == nil || IsNil(o.Size) {
		var ret int32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttachmentHash) GetSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *AttachmentHash) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int32 and assigns it to the Size field.
func (o *AttachmentHash) SetSize(v int32) {
	o.Size = &v
}

// GetMime returns the Mime field value if set, zero value otherwise.
func (o *AttachmentHash) GetMime() string {
	if o == nil || IsNil(o.Mime) {
		var ret string
		return ret
	}
	return *o.Mime
}

// GetMimeOk returns a tuple with the Mime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttachmentHash) GetMimeOk() (*string, bool) {
	if o == nil || IsNil(o.Mime) {
		return nil, false
	}
	return o.Mime, true
}

// HasMime returns a boolean if a field has been set.
func (o *AttachmentHash) HasMime() bool {
	if o != nil && !IsNil(o.Mime) {
		return true
	}

	return false
}

// SetMime gets a reference to the given string and assigns it to the Mime field.
func (o *AttachmentHash) SetMime(v string) {
	o.Mime = &v
}

// GetFilename returns the Filename field value if set, zero value otherwise.
func (o *AttachmentHash) GetFilename() string {
	if o == nil || IsNil(o.Filename) {
		var ret string
		return ret
	}
	return *o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttachmentHash) GetFilenameOk() (*string, bool) {
	if o == nil || IsNil(o.Filename) {
		return nil, false
	}
	return o.Filename, true
}

// HasFilename returns a boolean if a field has been set.
func (o *AttachmentHash) HasFilename() bool {
	if o != nil && !IsNil(o.Filename) {
		return true
	}

	return false
}

// SetFilename gets a reference to the given string and assigns it to the Filename field.
func (o *AttachmentHash) SetFilename(v string) {
	o.Filename = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *AttachmentHash) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttachmentHash) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *AttachmentHash) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *AttachmentHash) SetUrl(v string) {
	o.Url = &v
}

// GetHash returns the Hash field value if set, zero value otherwise.
func (o *AttachmentHash) GetHash() string {
	if o == nil || IsNil(o.Hash) {
		var ret string
		return ret
	}
	return *o.Hash
}

// GetHashOk returns a tuple with the Hash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttachmentHash) GetHashOk() (*string, bool) {
	if o == nil || IsNil(o.Hash) {
		return nil, false
	}
	return o.Hash, true
}

// HasHash returns a boolean if a field has been set.
func (o *AttachmentHash) HasHash() bool {
	if o != nil && !IsNil(o.Hash) {
		return true
	}

	return false
}

// SetHash gets a reference to the given string and assigns it to the Hash field.
func (o *AttachmentHash) SetHash(v string) {
	o.Hash = &v
}

func (o AttachmentHash) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AttachmentHash) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.Mime) {
		toSerialize["mime"] = o.Mime
	}
	if !IsNil(o.Filename) {
		toSerialize["filename"] = o.Filename
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Hash) {
		toSerialize["hash"] = o.Hash
	}
	return toSerialize, nil
}

type NullableAttachmentHash struct {
	value *AttachmentHash
	isSet bool
}

func (v NullableAttachmentHash) Get() *AttachmentHash {
	return v.value
}

func (v *NullableAttachmentHash) Set(val *AttachmentHash) {
	v.value = val
	v.isSet = true
}

func (v NullableAttachmentHash) IsSet() bool {
	return v.isSet
}

func (v *NullableAttachmentHash) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttachmentHash(val *AttachmentHash) *NullableAttachmentHash {
	return &NullableAttachmentHash{value: val, isSet: true}
}

func (v NullableAttachmentHash) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttachmentHash) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
