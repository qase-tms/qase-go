/*
Qase.io TestOps API v1

Qase TestOps API v1 Specification.

API version: 1.0.0
Contact: support@qase.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v1_client

import (
	"encoding/json"
)

// checks if the PlanUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlanUpdate{}

// PlanUpdate struct for PlanUpdate
type PlanUpdate struct {
	Title       *string        `json:"title,omitempty"`
	Description NullableString `json:"description,omitempty"`
	Cases       []int64        `json:"cases,omitempty"`
}

// NewPlanUpdate instantiates a new PlanUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlanUpdate() *PlanUpdate {
	this := PlanUpdate{}
	return &this
}

// NewPlanUpdateWithDefaults instantiates a new PlanUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlanUpdateWithDefaults() *PlanUpdate {
	this := PlanUpdate{}
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *PlanUpdate) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanUpdate) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *PlanUpdate) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *PlanUpdate) SetTitle(v string) {
	o.Title = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlanUpdate) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlanUpdate) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *PlanUpdate) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *PlanUpdate) SetDescription(v string) {
	o.Description.Set(&v)
}

// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *PlanUpdate) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *PlanUpdate) UnsetDescription() {
	o.Description.Unset()
}

// GetCases returns the Cases field value if set, zero value otherwise.
func (o *PlanUpdate) GetCases() []int64 {
	if o == nil || IsNil(o.Cases) {
		var ret []int64
		return ret
	}
	return o.Cases
}

// GetCasesOk returns a tuple with the Cases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanUpdate) GetCasesOk() ([]int64, bool) {
	if o == nil || IsNil(o.Cases) {
		return nil, false
	}
	return o.Cases, true
}

// HasCases returns a boolean if a field has been set.
func (o *PlanUpdate) HasCases() bool {
	if o != nil && !IsNil(o.Cases) {
		return true
	}

	return false
}

// SetCases gets a reference to the given []int64 and assigns it to the Cases field.
func (o *PlanUpdate) SetCases(v []int64) {
	o.Cases = v
}

func (o PlanUpdate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlanUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if !IsNil(o.Cases) {
		toSerialize["cases"] = o.Cases
	}
	return toSerialize, nil
}

type NullablePlanUpdate struct {
	value *PlanUpdate
	isSet bool
}

func (v NullablePlanUpdate) Get() *PlanUpdate {
	return v.value
}

func (v *NullablePlanUpdate) Set(val *PlanUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullablePlanUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullablePlanUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlanUpdate(val *PlanUpdate) *NullablePlanUpdate {
	return &NullablePlanUpdate{value: val, isSet: true}
}

func (v NullablePlanUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlanUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
