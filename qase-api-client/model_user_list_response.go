/*
Qase.io TestOps API v1

Qase TestOps API v1 Specification.

API version: 1.0.0
Contact: support@qase.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v1_client

import (
	"encoding/json"
)

// checks if the UserListResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserListResponse{}

// UserListResponse struct for UserListResponse
type UserListResponse struct {
	Status *bool                        `json:"status,omitempty"`
	Result *UserListResponseAllOfResult `json:"result,omitempty"`
}

// NewUserListResponse instantiates a new UserListResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserListResponse() *UserListResponse {
	this := UserListResponse{}
	return &this
}

// NewUserListResponseWithDefaults instantiates a new UserListResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserListResponseWithDefaults() *UserListResponse {
	this := UserListResponse{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *UserListResponse) GetStatus() bool {
	if o == nil || IsNil(o.Status) {
		var ret bool
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserListResponse) GetStatusOk() (*bool, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *UserListResponse) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given bool and assigns it to the Status field.
func (o *UserListResponse) SetStatus(v bool) {
	o.Status = &v
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *UserListResponse) GetResult() UserListResponseAllOfResult {
	if o == nil || IsNil(o.Result) {
		var ret UserListResponseAllOfResult
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserListResponse) GetResultOk() (*UserListResponseAllOfResult, bool) {
	if o == nil || IsNil(o.Result) {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *UserListResponse) HasResult() bool {
	if o != nil && !IsNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given UserListResponseAllOfResult and assigns it to the Result field.
func (o *UserListResponse) SetResult(v UserListResponseAllOfResult) {
	o.Result = &v
}

func (o UserListResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserListResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Result) {
		toSerialize["result"] = o.Result
	}
	return toSerialize, nil
}

type NullableUserListResponse struct {
	value *UserListResponse
	isSet bool
}

func (v NullableUserListResponse) Get() *UserListResponse {
	return v.value
}

func (v *NullableUserListResponse) Set(val *UserListResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUserListResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUserListResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserListResponse(val *UserListResponse) *NullableUserListResponse {
	return &NullableUserListResponse{value: val, isSet: true}
}

func (v NullableUserListResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserListResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
