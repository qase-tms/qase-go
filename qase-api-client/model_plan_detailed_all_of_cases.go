/*
Qase.io TestOps API v1

Qase TestOps API v1 Specification.

API version: 1.0.0
Contact: support@qase.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v1_client

import (
	"encoding/json"
)

// checks if the PlanDetailedAllOfCases type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlanDetailedAllOfCases{}

// PlanDetailedAllOfCases struct for PlanDetailedAllOfCases
type PlanDetailedAllOfCases struct {
	CaseId     *int64        `json:"case_id,omitempty"`
	AssigneeId NullableInt64 `json:"assignee_id,omitempty"`
}

// NewPlanDetailedAllOfCases instantiates a new PlanDetailedAllOfCases object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlanDetailedAllOfCases() *PlanDetailedAllOfCases {
	this := PlanDetailedAllOfCases{}
	return &this
}

// NewPlanDetailedAllOfCasesWithDefaults instantiates a new PlanDetailedAllOfCases object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlanDetailedAllOfCasesWithDefaults() *PlanDetailedAllOfCases {
	this := PlanDetailedAllOfCases{}
	return &this
}

// GetCaseId returns the CaseId field value if set, zero value otherwise.
func (o *PlanDetailedAllOfCases) GetCaseId() int64 {
	if o == nil || IsNil(o.CaseId) {
		var ret int64
		return ret
	}
	return *o.CaseId
}

// GetCaseIdOk returns a tuple with the CaseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanDetailedAllOfCases) GetCaseIdOk() (*int64, bool) {
	if o == nil || IsNil(o.CaseId) {
		return nil, false
	}
	return o.CaseId, true
}

// HasCaseId returns a boolean if a field has been set.
func (o *PlanDetailedAllOfCases) HasCaseId() bool {
	if o != nil && !IsNil(o.CaseId) {
		return true
	}

	return false
}

// SetCaseId gets a reference to the given int64 and assigns it to the CaseId field.
func (o *PlanDetailedAllOfCases) SetCaseId(v int64) {
	o.CaseId = &v
}

// GetAssigneeId returns the AssigneeId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlanDetailedAllOfCases) GetAssigneeId() int64 {
	if o == nil || IsNil(o.AssigneeId.Get()) {
		var ret int64
		return ret
	}
	return *o.AssigneeId.Get()
}

// GetAssigneeIdOk returns a tuple with the AssigneeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlanDetailedAllOfCases) GetAssigneeIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.AssigneeId.Get(), o.AssigneeId.IsSet()
}

// HasAssigneeId returns a boolean if a field has been set.
func (o *PlanDetailedAllOfCases) HasAssigneeId() bool {
	if o != nil && o.AssigneeId.IsSet() {
		return true
	}

	return false
}

// SetAssigneeId gets a reference to the given NullableInt64 and assigns it to the AssigneeId field.
func (o *PlanDetailedAllOfCases) SetAssigneeId(v int64) {
	o.AssigneeId.Set(&v)
}

// SetAssigneeIdNil sets the value for AssigneeId to be an explicit nil
func (o *PlanDetailedAllOfCases) SetAssigneeIdNil() {
	o.AssigneeId.Set(nil)
}

// UnsetAssigneeId ensures that no value is present for AssigneeId, not even an explicit nil
func (o *PlanDetailedAllOfCases) UnsetAssigneeId() {
	o.AssigneeId.Unset()
}

func (o PlanDetailedAllOfCases) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlanDetailedAllOfCases) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CaseId) {
		toSerialize["case_id"] = o.CaseId
	}
	if o.AssigneeId.IsSet() {
		toSerialize["assignee_id"] = o.AssigneeId.Get()
	}
	return toSerialize, nil
}

type NullablePlanDetailedAllOfCases struct {
	value *PlanDetailedAllOfCases
	isSet bool
}

func (v NullablePlanDetailedAllOfCases) Get() *PlanDetailedAllOfCases {
	return v.value
}

func (v *NullablePlanDetailedAllOfCases) Set(val *PlanDetailedAllOfCases) {
	v.value = val
	v.isSet = true
}

func (v NullablePlanDetailedAllOfCases) IsSet() bool {
	return v.isSet
}

func (v *NullablePlanDetailedAllOfCases) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlanDetailedAllOfCases(val *PlanDetailedAllOfCases) *NullablePlanDetailedAllOfCases {
	return &NullablePlanDetailedAllOfCases{value: val, isSet: true}
}

func (v NullablePlanDetailedAllOfCases) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlanDetailedAllOfCases) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
