/*
Qase.io TestOps API v1

Qase TestOps API v1 Specification.

API version: 1.0.0
Contact: support@qase.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v1_client

import (
	"encoding/json"
	"fmt"

	"gopkg.in/validator.v2"
)

// SearchResponseAllOfResultEntities - struct for SearchResponseAllOfResultEntities
type SearchResponseAllOfResultEntities struct {
	DefectQuery      *DefectQuery
	PlanQuery        *PlanQuery
	RequirementQuery *RequirementQuery
	ResultQuery      *ResultQuery
	RunQuery         *RunQuery
	TestCaseQuery    *TestCaseQuery
}

// DefectQueryAsSearchResponseAllOfResultEntities is a convenience function that returns DefectQuery wrapped in SearchResponseAllOfResultEntities
func DefectQueryAsSearchResponseAllOfResultEntities(v *DefectQuery) SearchResponseAllOfResultEntities {
	return SearchResponseAllOfResultEntities{
		DefectQuery: v,
	}
}

// PlanQueryAsSearchResponseAllOfResultEntities is a convenience function that returns PlanQuery wrapped in SearchResponseAllOfResultEntities
func PlanQueryAsSearchResponseAllOfResultEntities(v *PlanQuery) SearchResponseAllOfResultEntities {
	return SearchResponseAllOfResultEntities{
		PlanQuery: v,
	}
}

// RequirementQueryAsSearchResponseAllOfResultEntities is a convenience function that returns RequirementQuery wrapped in SearchResponseAllOfResultEntities
func RequirementQueryAsSearchResponseAllOfResultEntities(v *RequirementQuery) SearchResponseAllOfResultEntities {
	return SearchResponseAllOfResultEntities{
		RequirementQuery: v,
	}
}

// ResultQueryAsSearchResponseAllOfResultEntities is a convenience function that returns ResultQuery wrapped in SearchResponseAllOfResultEntities
func ResultQueryAsSearchResponseAllOfResultEntities(v *ResultQuery) SearchResponseAllOfResultEntities {
	return SearchResponseAllOfResultEntities{
		ResultQuery: v,
	}
}

// RunQueryAsSearchResponseAllOfResultEntities is a convenience function that returns RunQuery wrapped in SearchResponseAllOfResultEntities
func RunQueryAsSearchResponseAllOfResultEntities(v *RunQuery) SearchResponseAllOfResultEntities {
	return SearchResponseAllOfResultEntities{
		RunQuery: v,
	}
}

// TestCaseQueryAsSearchResponseAllOfResultEntities is a convenience function that returns TestCaseQuery wrapped in SearchResponseAllOfResultEntities
func TestCaseQueryAsSearchResponseAllOfResultEntities(v *TestCaseQuery) SearchResponseAllOfResultEntities {
	return SearchResponseAllOfResultEntities{
		TestCaseQuery: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *SearchResponseAllOfResultEntities) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DefectQuery
	err = newStrictDecoder(data).Decode(&dst.DefectQuery)
	if err == nil {
		jsonDefectQuery, _ := json.Marshal(dst.DefectQuery)
		if string(jsonDefectQuery) == "{}" { // empty struct
			dst.DefectQuery = nil
		} else {
			if err = validator.Validate(dst.DefectQuery); err != nil {
				dst.DefectQuery = nil
			} else {
				match++
			}
		}
	} else {
		dst.DefectQuery = nil
	}

	// try to unmarshal data into PlanQuery
	err = newStrictDecoder(data).Decode(&dst.PlanQuery)
	if err == nil {
		jsonPlanQuery, _ := json.Marshal(dst.PlanQuery)
		if string(jsonPlanQuery) == "{}" { // empty struct
			dst.PlanQuery = nil
		} else {
			if err = validator.Validate(dst.PlanQuery); err != nil {
				dst.PlanQuery = nil
			} else {
				match++
			}
		}
	} else {
		dst.PlanQuery = nil
	}

	// try to unmarshal data into RequirementQuery
	err = newStrictDecoder(data).Decode(&dst.RequirementQuery)
	if err == nil {
		jsonRequirementQuery, _ := json.Marshal(dst.RequirementQuery)
		if string(jsonRequirementQuery) == "{}" { // empty struct
			dst.RequirementQuery = nil
		} else {
			if err = validator.Validate(dst.RequirementQuery); err != nil {
				dst.RequirementQuery = nil
			} else {
				match++
			}
		}
	} else {
		dst.RequirementQuery = nil
	}

	// try to unmarshal data into ResultQuery
	err = newStrictDecoder(data).Decode(&dst.ResultQuery)
	if err == nil {
		jsonResultQuery, _ := json.Marshal(dst.ResultQuery)
		if string(jsonResultQuery) == "{}" { // empty struct
			dst.ResultQuery = nil
		} else {
			if err = validator.Validate(dst.ResultQuery); err != nil {
				dst.ResultQuery = nil
			} else {
				match++
			}
		}
	} else {
		dst.ResultQuery = nil
	}

	// try to unmarshal data into RunQuery
	err = newStrictDecoder(data).Decode(&dst.RunQuery)
	if err == nil {
		jsonRunQuery, _ := json.Marshal(dst.RunQuery)
		if string(jsonRunQuery) == "{}" { // empty struct
			dst.RunQuery = nil
		} else {
			if err = validator.Validate(dst.RunQuery); err != nil {
				dst.RunQuery = nil
			} else {
				match++
			}
		}
	} else {
		dst.RunQuery = nil
	}

	// try to unmarshal data into TestCaseQuery
	err = newStrictDecoder(data).Decode(&dst.TestCaseQuery)
	if err == nil {
		jsonTestCaseQuery, _ := json.Marshal(dst.TestCaseQuery)
		if string(jsonTestCaseQuery) == "{}" { // empty struct
			dst.TestCaseQuery = nil
		} else {
			if err = validator.Validate(dst.TestCaseQuery); err != nil {
				dst.TestCaseQuery = nil
			} else {
				match++
			}
		}
	} else {
		dst.TestCaseQuery = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DefectQuery = nil
		dst.PlanQuery = nil
		dst.RequirementQuery = nil
		dst.ResultQuery = nil
		dst.RunQuery = nil
		dst.TestCaseQuery = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SearchResponseAllOfResultEntities)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SearchResponseAllOfResultEntities)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SearchResponseAllOfResultEntities) MarshalJSON() ([]byte, error) {
	if src.DefectQuery != nil {
		return json.Marshal(&src.DefectQuery)
	}

	if src.PlanQuery != nil {
		return json.Marshal(&src.PlanQuery)
	}

	if src.RequirementQuery != nil {
		return json.Marshal(&src.RequirementQuery)
	}

	if src.ResultQuery != nil {
		return json.Marshal(&src.ResultQuery)
	}

	if src.RunQuery != nil {
		return json.Marshal(&src.RunQuery)
	}

	if src.TestCaseQuery != nil {
		return json.Marshal(&src.TestCaseQuery)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SearchResponseAllOfResultEntities) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.DefectQuery != nil {
		return obj.DefectQuery
	}

	if obj.PlanQuery != nil {
		return obj.PlanQuery
	}

	if obj.RequirementQuery != nil {
		return obj.RequirementQuery
	}

	if obj.ResultQuery != nil {
		return obj.ResultQuery
	}

	if obj.RunQuery != nil {
		return obj.RunQuery
	}

	if obj.TestCaseQuery != nil {
		return obj.TestCaseQuery
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj SearchResponseAllOfResultEntities) GetActualInstanceValue() interface{} {
	if obj.DefectQuery != nil {
		return *obj.DefectQuery
	}

	if obj.PlanQuery != nil {
		return *obj.PlanQuery
	}

	if obj.RequirementQuery != nil {
		return *obj.RequirementQuery
	}

	if obj.ResultQuery != nil {
		return *obj.ResultQuery
	}

	if obj.RunQuery != nil {
		return *obj.RunQuery
	}

	if obj.TestCaseQuery != nil {
		return *obj.TestCaseQuery
	}

	// all schemas are nil
	return nil
}

type NullableSearchResponseAllOfResultEntities struct {
	value *SearchResponseAllOfResultEntities
	isSet bool
}

func (v NullableSearchResponseAllOfResultEntities) Get() *SearchResponseAllOfResultEntities {
	return v.value
}

func (v *NullableSearchResponseAllOfResultEntities) Set(val *SearchResponseAllOfResultEntities) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchResponseAllOfResultEntities) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchResponseAllOfResultEntities) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchResponseAllOfResultEntities(val *SearchResponseAllOfResultEntities) *NullableSearchResponseAllOfResultEntities {
	return &NullableSearchResponseAllOfResultEntities{value: val, isSet: true}
}

func (v NullableSearchResponseAllOfResultEntities) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchResponseAllOfResultEntities) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
