/*
Qase.io TestOps API v1

Qase TestOps API v1 Specification.

API version: 1.0.0
Contact: support@qase.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v1_client

import (
	"encoding/json"
	"fmt"
)

// TestCaseParametercreate - struct for TestCaseParametercreate
type TestCaseParametercreate struct {
	ParameterGroup  *ParameterGroup
	ParameterShared *ParameterShared
	ParameterSingle *ParameterSingle
}

// ParameterGroupAsTestCaseParametercreate is a convenience function that returns ParameterGroup wrapped in TestCaseParametercreate
func ParameterGroupAsTestCaseParametercreate(v *ParameterGroup) TestCaseParametercreate {
	return TestCaseParametercreate{
		ParameterGroup: v,
	}
}

// ParameterSharedAsTestCaseParametercreate is a convenience function that returns ParameterShared wrapped in TestCaseParametercreate
func ParameterSharedAsTestCaseParametercreate(v *ParameterShared) TestCaseParametercreate {
	return TestCaseParametercreate{
		ParameterShared: v,
	}
}

// ParameterSingleAsTestCaseParametercreate is a convenience function that returns ParameterSingle wrapped in TestCaseParametercreate
func ParameterSingleAsTestCaseParametercreate(v *ParameterSingle) TestCaseParametercreate {
	return TestCaseParametercreate{
		ParameterSingle: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *TestCaseParametercreate) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ParameterGroup
	err = newStrictDecoder(data).Decode(&dst.ParameterGroup)
	if err == nil {
		jsonParameterGroup, _ := json.Marshal(dst.ParameterGroup)
		if string(jsonParameterGroup) == "{}" { // empty struct
			dst.ParameterGroup = nil
		} else {
			match++
		}
	} else {
		dst.ParameterGroup = nil
	}

	// try to unmarshal data into ParameterShared
	err = newStrictDecoder(data).Decode(&dst.ParameterShared)
	if err == nil {
		jsonParameterShared, _ := json.Marshal(dst.ParameterShared)
		if string(jsonParameterShared) == "{}" { // empty struct
			dst.ParameterShared = nil
		} else {
			match++
		}
	} else {
		dst.ParameterShared = nil
	}

	// try to unmarshal data into ParameterSingle
	err = newStrictDecoder(data).Decode(&dst.ParameterSingle)
	if err == nil {
		jsonParameterSingle, _ := json.Marshal(dst.ParameterSingle)
		if string(jsonParameterSingle) == "{}" { // empty struct
			dst.ParameterSingle = nil
		} else {
			match++
		}
	} else {
		dst.ParameterSingle = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ParameterGroup = nil
		dst.ParameterShared = nil
		dst.ParameterSingle = nil

		return fmt.Errorf("data matches more than one schema in oneOf(TestCaseParametercreate)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(TestCaseParametercreate)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TestCaseParametercreate) MarshalJSON() ([]byte, error) {
	if src.ParameterGroup != nil {
		return json.Marshal(&src.ParameterGroup)
	}

	if src.ParameterShared != nil {
		return json.Marshal(&src.ParameterShared)
	}

	if src.ParameterSingle != nil {
		return json.Marshal(&src.ParameterSingle)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TestCaseParametercreate) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ParameterGroup != nil {
		return obj.ParameterGroup
	}

	if obj.ParameterShared != nil {
		return obj.ParameterShared
	}

	if obj.ParameterSingle != nil {
		return obj.ParameterSingle
	}

	// all schemas are nil
	return nil
}

type NullableTestCaseParametercreate struct {
	value *TestCaseParametercreate
	isSet bool
}

func (v NullableTestCaseParametercreate) Get() *TestCaseParametercreate {
	return v.value
}

func (v *NullableTestCaseParametercreate) Set(val *TestCaseParametercreate) {
	v.value = val
	v.isSet = true
}

func (v NullableTestCaseParametercreate) IsSet() bool {
	return v.isSet
}

func (v *NullableTestCaseParametercreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestCaseParametercreate(val *TestCaseParametercreate) *NullableTestCaseParametercreate {
	return &NullableTestCaseParametercreate{value: val, isSet: true}
}

func (v NullableTestCaseParametercreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestCaseParametercreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
