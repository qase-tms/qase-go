/*
Qase.io TestOps API v1

Qase TestOps API v1 Specification.

API version: 1.0.0
Contact: support@qase.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v1_client

import (
	"encoding/json"
	"time"
)

// checks if the Result type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Result{}

// Result struct for Result
type Result struct {
	Hash        *string          `json:"hash,omitempty"`
	Comment     NullableString   `json:"comment,omitempty"`
	Stacktrace  NullableString   `json:"stacktrace,omitempty"`
	RunId       *int64           `json:"run_id,omitempty"`
	CaseId      *int64           `json:"case_id,omitempty"`
	Steps       []TestStepResult `json:"steps,omitempty"`
	Status      *string          `json:"status,omitempty"`
	IsApiResult *bool            `json:"is_api_result,omitempty"`
	TimeSpentMs *int64           `json:"time_spent_ms,omitempty"`
	EndTime     NullableTime     `json:"end_time,omitempty"`
	Attachments []Attachment     `json:"attachments,omitempty"`
}

// NewResult instantiates a new Result object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResult() *Result {
	this := Result{}
	return &this
}

// NewResultWithDefaults instantiates a new Result object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResultWithDefaults() *Result {
	this := Result{}
	return &this
}

// GetHash returns the Hash field value if set, zero value otherwise.
func (o *Result) GetHash() string {
	if o == nil || IsNil(o.Hash) {
		var ret string
		return ret
	}
	return *o.Hash
}

// GetHashOk returns a tuple with the Hash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Result) GetHashOk() (*string, bool) {
	if o == nil || IsNil(o.Hash) {
		return nil, false
	}
	return o.Hash, true
}

// HasHash returns a boolean if a field has been set.
func (o *Result) HasHash() bool {
	if o != nil && !IsNil(o.Hash) {
		return true
	}

	return false
}

// SetHash gets a reference to the given string and assigns it to the Hash field.
func (o *Result) SetHash(v string) {
	o.Hash = &v
}

// GetComment returns the Comment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Result) GetComment() string {
	if o == nil || IsNil(o.Comment.Get()) {
		var ret string
		return ret
	}
	return *o.Comment.Get()
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Result) GetCommentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Comment.Get(), o.Comment.IsSet()
}

// HasComment returns a boolean if a field has been set.
func (o *Result) HasComment() bool {
	if o != nil && o.Comment.IsSet() {
		return true
	}

	return false
}

// SetComment gets a reference to the given NullableString and assigns it to the Comment field.
func (o *Result) SetComment(v string) {
	o.Comment.Set(&v)
}

// SetCommentNil sets the value for Comment to be an explicit nil
func (o *Result) SetCommentNil() {
	o.Comment.Set(nil)
}

// UnsetComment ensures that no value is present for Comment, not even an explicit nil
func (o *Result) UnsetComment() {
	o.Comment.Unset()
}

// GetStacktrace returns the Stacktrace field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Result) GetStacktrace() string {
	if o == nil || IsNil(o.Stacktrace.Get()) {
		var ret string
		return ret
	}
	return *o.Stacktrace.Get()
}

// GetStacktraceOk returns a tuple with the Stacktrace field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Result) GetStacktraceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Stacktrace.Get(), o.Stacktrace.IsSet()
}

// HasStacktrace returns a boolean if a field has been set.
func (o *Result) HasStacktrace() bool {
	if o != nil && o.Stacktrace.IsSet() {
		return true
	}

	return false
}

// SetStacktrace gets a reference to the given NullableString and assigns it to the Stacktrace field.
func (o *Result) SetStacktrace(v string) {
	o.Stacktrace.Set(&v)
}

// SetStacktraceNil sets the value for Stacktrace to be an explicit nil
func (o *Result) SetStacktraceNil() {
	o.Stacktrace.Set(nil)
}

// UnsetStacktrace ensures that no value is present for Stacktrace, not even an explicit nil
func (o *Result) UnsetStacktrace() {
	o.Stacktrace.Unset()
}

// GetRunId returns the RunId field value if set, zero value otherwise.
func (o *Result) GetRunId() int64 {
	if o == nil || IsNil(o.RunId) {
		var ret int64
		return ret
	}
	return *o.RunId
}

// GetRunIdOk returns a tuple with the RunId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Result) GetRunIdOk() (*int64, bool) {
	if o == nil || IsNil(o.RunId) {
		return nil, false
	}
	return o.RunId, true
}

// HasRunId returns a boolean if a field has been set.
func (o *Result) HasRunId() bool {
	if o != nil && !IsNil(o.RunId) {
		return true
	}

	return false
}

// SetRunId gets a reference to the given int64 and assigns it to the RunId field.
func (o *Result) SetRunId(v int64) {
	o.RunId = &v
}

// GetCaseId returns the CaseId field value if set, zero value otherwise.
func (o *Result) GetCaseId() int64 {
	if o == nil || IsNil(o.CaseId) {
		var ret int64
		return ret
	}
	return *o.CaseId
}

// GetCaseIdOk returns a tuple with the CaseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Result) GetCaseIdOk() (*int64, bool) {
	if o == nil || IsNil(o.CaseId) {
		return nil, false
	}
	return o.CaseId, true
}

// HasCaseId returns a boolean if a field has been set.
func (o *Result) HasCaseId() bool {
	if o != nil && !IsNil(o.CaseId) {
		return true
	}

	return false
}

// SetCaseId gets a reference to the given int64 and assigns it to the CaseId field.
func (o *Result) SetCaseId(v int64) {
	o.CaseId = &v
}

// GetSteps returns the Steps field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Result) GetSteps() []TestStepResult {
	if o == nil {
		var ret []TestStepResult
		return ret
	}
	return o.Steps
}

// GetStepsOk returns a tuple with the Steps field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Result) GetStepsOk() ([]TestStepResult, bool) {
	if o == nil || IsNil(o.Steps) {
		return nil, false
	}
	return o.Steps, true
}

// HasSteps returns a boolean if a field has been set.
func (o *Result) HasSteps() bool {
	if o != nil && !IsNil(o.Steps) {
		return true
	}

	return false
}

// SetSteps gets a reference to the given []TestStepResult and assigns it to the Steps field.
func (o *Result) SetSteps(v []TestStepResult) {
	o.Steps = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Result) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Result) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Result) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Result) SetStatus(v string) {
	o.Status = &v
}

// GetIsApiResult returns the IsApiResult field value if set, zero value otherwise.
func (o *Result) GetIsApiResult() bool {
	if o == nil || IsNil(o.IsApiResult) {
		var ret bool
		return ret
	}
	return *o.IsApiResult
}

// GetIsApiResultOk returns a tuple with the IsApiResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Result) GetIsApiResultOk() (*bool, bool) {
	if o == nil || IsNil(o.IsApiResult) {
		return nil, false
	}
	return o.IsApiResult, true
}

// HasIsApiResult returns a boolean if a field has been set.
func (o *Result) HasIsApiResult() bool {
	if o != nil && !IsNil(o.IsApiResult) {
		return true
	}

	return false
}

// SetIsApiResult gets a reference to the given bool and assigns it to the IsApiResult field.
func (o *Result) SetIsApiResult(v bool) {
	o.IsApiResult = &v
}

// GetTimeSpentMs returns the TimeSpentMs field value if set, zero value otherwise.
func (o *Result) GetTimeSpentMs() int64 {
	if o == nil || IsNil(o.TimeSpentMs) {
		var ret int64
		return ret
	}
	return *o.TimeSpentMs
}

// GetTimeSpentMsOk returns a tuple with the TimeSpentMs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Result) GetTimeSpentMsOk() (*int64, bool) {
	if o == nil || IsNil(o.TimeSpentMs) {
		return nil, false
	}
	return o.TimeSpentMs, true
}

// HasTimeSpentMs returns a boolean if a field has been set.
func (o *Result) HasTimeSpentMs() bool {
	if o != nil && !IsNil(o.TimeSpentMs) {
		return true
	}

	return false
}

// SetTimeSpentMs gets a reference to the given int64 and assigns it to the TimeSpentMs field.
func (o *Result) SetTimeSpentMs(v int64) {
	o.TimeSpentMs = &v
}

// GetEndTime returns the EndTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Result) GetEndTime() time.Time {
	if o == nil || IsNil(o.EndTime.Get()) {
		var ret time.Time
		return ret
	}
	return *o.EndTime.Get()
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Result) GetEndTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.EndTime.Get(), o.EndTime.IsSet()
}

// HasEndTime returns a boolean if a field has been set.
func (o *Result) HasEndTime() bool {
	if o != nil && o.EndTime.IsSet() {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given NullableTime and assigns it to the EndTime field.
func (o *Result) SetEndTime(v time.Time) {
	o.EndTime.Set(&v)
}

// SetEndTimeNil sets the value for EndTime to be an explicit nil
func (o *Result) SetEndTimeNil() {
	o.EndTime.Set(nil)
}

// UnsetEndTime ensures that no value is present for EndTime, not even an explicit nil
func (o *Result) UnsetEndTime() {
	o.EndTime.Unset()
}

// GetAttachments returns the Attachments field value if set, zero value otherwise.
func (o *Result) GetAttachments() []Attachment {
	if o == nil || IsNil(o.Attachments) {
		var ret []Attachment
		return ret
	}
	return o.Attachments
}

// GetAttachmentsOk returns a tuple with the Attachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Result) GetAttachmentsOk() ([]Attachment, bool) {
	if o == nil || IsNil(o.Attachments) {
		return nil, false
	}
	return o.Attachments, true
}

// HasAttachments returns a boolean if a field has been set.
func (o *Result) HasAttachments() bool {
	if o != nil && !IsNil(o.Attachments) {
		return true
	}

	return false
}

// SetAttachments gets a reference to the given []Attachment and assigns it to the Attachments field.
func (o *Result) SetAttachments(v []Attachment) {
	o.Attachments = v
}

func (o Result) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Result) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Hash) {
		toSerialize["hash"] = o.Hash
	}
	if o.Comment.IsSet() {
		toSerialize["comment"] = o.Comment.Get()
	}
	if o.Stacktrace.IsSet() {
		toSerialize["stacktrace"] = o.Stacktrace.Get()
	}
	if !IsNil(o.RunId) {
		toSerialize["run_id"] = o.RunId
	}
	if !IsNil(o.CaseId) {
		toSerialize["case_id"] = o.CaseId
	}
	if o.Steps != nil {
		toSerialize["steps"] = o.Steps
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.IsApiResult) {
		toSerialize["is_api_result"] = o.IsApiResult
	}
	if !IsNil(o.TimeSpentMs) {
		toSerialize["time_spent_ms"] = o.TimeSpentMs
	}
	if o.EndTime.IsSet() {
		toSerialize["end_time"] = o.EndTime.Get()
	}
	if !IsNil(o.Attachments) {
		toSerialize["attachments"] = o.Attachments
	}
	return toSerialize, nil
}

type NullableResult struct {
	value *Result
	isSet bool
}

func (v NullableResult) Get() *Result {
	return v.value
}

func (v *NullableResult) Set(val *Result) {
	v.value = val
	v.isSet = true
}

func (v NullableResult) IsSet() bool {
	return v.isSet
}

func (v *NullableResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResult(val *Result) *NullableResult {
	return &NullableResult{value: val, isSet: true}
}

func (v NullableResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
