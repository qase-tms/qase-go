/*
Qase.io TestOps API v1

Qase TestOps API v1 Specification.

API version: 1.0.0
Contact: support@qase.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v1_client

import (
	"encoding/json"
)

// checks if the SharedParameterUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SharedParameterUpdate{}

// SharedParameterUpdate struct for SharedParameterUpdate
type SharedParameterUpdate struct {
	Title *string `json:"title,omitempty"`
	// List of project codes to associate with this shared parameter
	ProjectCodes            []string                  `json:"project_codes,omitempty"`
	IsEnabledForAllProjects *bool                     `json:"is_enabled_for_all_projects,omitempty"`
	Parameters              *SharedParameterParameter `json:"parameters,omitempty"`
}

// NewSharedParameterUpdate instantiates a new SharedParameterUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSharedParameterUpdate() *SharedParameterUpdate {
	this := SharedParameterUpdate{}
	return &this
}

// NewSharedParameterUpdateWithDefaults instantiates a new SharedParameterUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSharedParameterUpdateWithDefaults() *SharedParameterUpdate {
	this := SharedParameterUpdate{}
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *SharedParameterUpdate) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedParameterUpdate) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *SharedParameterUpdate) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *SharedParameterUpdate) SetTitle(v string) {
	o.Title = &v
}

// GetProjectCodes returns the ProjectCodes field value if set, zero value otherwise.
func (o *SharedParameterUpdate) GetProjectCodes() []string {
	if o == nil || IsNil(o.ProjectCodes) {
		var ret []string
		return ret
	}
	return o.ProjectCodes
}

// GetProjectCodesOk returns a tuple with the ProjectCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedParameterUpdate) GetProjectCodesOk() ([]string, bool) {
	if o == nil || IsNil(o.ProjectCodes) {
		return nil, false
	}
	return o.ProjectCodes, true
}

// HasProjectCodes returns a boolean if a field has been set.
func (o *SharedParameterUpdate) HasProjectCodes() bool {
	if o != nil && !IsNil(o.ProjectCodes) {
		return true
	}

	return false
}

// SetProjectCodes gets a reference to the given []string and assigns it to the ProjectCodes field.
func (o *SharedParameterUpdate) SetProjectCodes(v []string) {
	o.ProjectCodes = v
}

// GetIsEnabledForAllProjects returns the IsEnabledForAllProjects field value if set, zero value otherwise.
func (o *SharedParameterUpdate) GetIsEnabledForAllProjects() bool {
	if o == nil || IsNil(o.IsEnabledForAllProjects) {
		var ret bool
		return ret
	}
	return *o.IsEnabledForAllProjects
}

// GetIsEnabledForAllProjectsOk returns a tuple with the IsEnabledForAllProjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedParameterUpdate) GetIsEnabledForAllProjectsOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEnabledForAllProjects) {
		return nil, false
	}
	return o.IsEnabledForAllProjects, true
}

// HasIsEnabledForAllProjects returns a boolean if a field has been set.
func (o *SharedParameterUpdate) HasIsEnabledForAllProjects() bool {
	if o != nil && !IsNil(o.IsEnabledForAllProjects) {
		return true
	}

	return false
}

// SetIsEnabledForAllProjects gets a reference to the given bool and assigns it to the IsEnabledForAllProjects field.
func (o *SharedParameterUpdate) SetIsEnabledForAllProjects(v bool) {
	o.IsEnabledForAllProjects = &v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *SharedParameterUpdate) GetParameters() SharedParameterParameter {
	if o == nil || IsNil(o.Parameters) {
		var ret SharedParameterParameter
		return ret
	}
	return *o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedParameterUpdate) GetParametersOk() (*SharedParameterParameter, bool) {
	if o == nil || IsNil(o.Parameters) {
		return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *SharedParameterUpdate) HasParameters() bool {
	if o != nil && !IsNil(o.Parameters) {
		return true
	}

	return false
}

// SetParameters gets a reference to the given SharedParameterParameter and assigns it to the Parameters field.
func (o *SharedParameterUpdate) SetParameters(v SharedParameterParameter) {
	o.Parameters = &v
}

func (o SharedParameterUpdate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SharedParameterUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.ProjectCodes) {
		toSerialize["project_codes"] = o.ProjectCodes
	}
	if !IsNil(o.IsEnabledForAllProjects) {
		toSerialize["is_enabled_for_all_projects"] = o.IsEnabledForAllProjects
	}
	if !IsNil(o.Parameters) {
		toSerialize["parameters"] = o.Parameters
	}
	return toSerialize, nil
}

type NullableSharedParameterUpdate struct {
	value *SharedParameterUpdate
	isSet bool
}

func (v NullableSharedParameterUpdate) Get() *SharedParameterUpdate {
	return v.value
}

func (v *NullableSharedParameterUpdate) Set(val *SharedParameterUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableSharedParameterUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableSharedParameterUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSharedParameterUpdate(val *SharedParameterUpdate) *NullableSharedParameterUpdate {
	return &NullableSharedParameterUpdate{value: val, isSet: true}
}

func (v NullableSharedParameterUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSharedParameterUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
