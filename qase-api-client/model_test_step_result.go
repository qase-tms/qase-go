/*
Qase.io TestOps API v1

Qase TestOps API v1 Specification.

API version: 1.0.0
Contact: support@qase.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v1_client

import (
	"encoding/json"
)

// checks if the TestStepResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TestStepResult{}

// TestStepResult struct for TestStepResult
type TestStepResult struct {
	Status *int32 `json:"status,omitempty"`
	// Deprecated
	Position    *int32       `json:"position,omitempty"`
	Attachments []Attachment `json:"attachments,omitempty"`
	// Nested steps results will be here. The same structure is used for them for them.
	Steps []map[string]interface{} `json:"steps,omitempty"`
}

// NewTestStepResult instantiates a new TestStepResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestStepResult() *TestStepResult {
	this := TestStepResult{}
	return &this
}

// NewTestStepResultWithDefaults instantiates a new TestStepResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestStepResultWithDefaults() *TestStepResult {
	this := TestStepResult{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *TestStepResult) GetStatus() int32 {
	if o == nil || IsNil(o.Status) {
		var ret int32
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestStepResult) GetStatusOk() (*int32, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *TestStepResult) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given int32 and assigns it to the Status field.
func (o *TestStepResult) SetStatus(v int32) {
	o.Status = &v
}

// GetPosition returns the Position field value if set, zero value otherwise.
// Deprecated
func (o *TestStepResult) GetPosition() int32 {
	if o == nil || IsNil(o.Position) {
		var ret int32
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *TestStepResult) GetPositionOk() (*int32, bool) {
	if o == nil || IsNil(o.Position) {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *TestStepResult) HasPosition() bool {
	if o != nil && !IsNil(o.Position) {
		return true
	}

	return false
}

// SetPosition gets a reference to the given int32 and assigns it to the Position field.
// Deprecated
func (o *TestStepResult) SetPosition(v int32) {
	o.Position = &v
}

// GetAttachments returns the Attachments field value if set, zero value otherwise.
func (o *TestStepResult) GetAttachments() []Attachment {
	if o == nil || IsNil(o.Attachments) {
		var ret []Attachment
		return ret
	}
	return o.Attachments
}

// GetAttachmentsOk returns a tuple with the Attachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestStepResult) GetAttachmentsOk() ([]Attachment, bool) {
	if o == nil || IsNil(o.Attachments) {
		return nil, false
	}
	return o.Attachments, true
}

// HasAttachments returns a boolean if a field has been set.
func (o *TestStepResult) HasAttachments() bool {
	if o != nil && !IsNil(o.Attachments) {
		return true
	}

	return false
}

// SetAttachments gets a reference to the given []Attachment and assigns it to the Attachments field.
func (o *TestStepResult) SetAttachments(v []Attachment) {
	o.Attachments = v
}

// GetSteps returns the Steps field value if set, zero value otherwise.
func (o *TestStepResult) GetSteps() []map[string]interface{} {
	if o == nil || IsNil(o.Steps) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Steps
}

// GetStepsOk returns a tuple with the Steps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestStepResult) GetStepsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Steps) {
		return nil, false
	}
	return o.Steps, true
}

// HasSteps returns a boolean if a field has been set.
func (o *TestStepResult) HasSteps() bool {
	if o != nil && !IsNil(o.Steps) {
		return true
	}

	return false
}

// SetSteps gets a reference to the given []map[string]interface{} and assigns it to the Steps field.
func (o *TestStepResult) SetSteps(v []map[string]interface{}) {
	o.Steps = v
}

func (o TestStepResult) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestStepResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Position) {
		toSerialize["position"] = o.Position
	}
	if !IsNil(o.Attachments) {
		toSerialize["attachments"] = o.Attachments
	}
	if !IsNil(o.Steps) {
		toSerialize["steps"] = o.Steps
	}
	return toSerialize, nil
}

type NullableTestStepResult struct {
	value *TestStepResult
	isSet bool
}

func (v NullableTestStepResult) Get() *TestStepResult {
	return v.value
}

func (v *NullableTestStepResult) Set(val *TestStepResult) {
	v.value = val
	v.isSet = true
}

func (v NullableTestStepResult) IsSet() bool {
	return v.isSet
}

func (v *NullableTestStepResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestStepResult(val *TestStepResult) *NullableTestStepResult {
	return &NullableTestStepResult{value: val, isSet: true}
}

func (v NullableTestStepResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestStepResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
