/*
Qase.io TestOps API v1

Qase TestOps API v1 Specification.

API version: 1.0.0
Contact: support@qase.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v1_client

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the QqlTestCase type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QqlTestCase{}

// QqlTestCase struct for QqlTestCase
type QqlTestCase struct {
	Id             *int64             `json:"id,omitempty"`
	TestCaseId     int64              `json:"test_case_id"`
	Position       *int32             `json:"position,omitempty"`
	Title          *string            `json:"title,omitempty"`
	Description    NullableString     `json:"description,omitempty"`
	Preconditions  NullableString     `json:"preconditions,omitempty"`
	Postconditions NullableString     `json:"postconditions,omitempty"`
	Severity       *int32             `json:"severity,omitempty"`
	Priority       *int32             `json:"priority,omitempty"`
	Type           *int32             `json:"type,omitempty"`
	Layer          *int32             `json:"layer,omitempty"`
	IsFlaky        *int32             `json:"is_flaky,omitempty"`
	Behavior       *int32             `json:"behavior,omitempty"`
	Automation     *int32             `json:"automation,omitempty"`
	Status         *int32             `json:"status,omitempty"`
	MilestoneId    NullableInt64      `json:"milestone_id,omitempty"`
	SuiteId        NullableInt64      `json:"suite_id,omitempty"`
	CustomFields   []CustomFieldValue `json:"custom_fields,omitempty"`
	Attachments    []Attachment       `json:"attachments,omitempty"`
	StepsType      NullableString     `json:"steps_type,omitempty"`
	Steps          []TestStep         `json:"steps,omitempty"`
	Params         *TestCaseParams    `json:"params,omitempty"`
	Tags           []TagValue         `json:"tags,omitempty"`
	// Deprecated, use `author_id` instead.
	// Deprecated
	MemberId  *int64     `json:"member_id,omitempty"`
	AuthorId  *int64     `json:"author_id,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// Author ID of the last update.
	UpdatedBy *int64 `json:"updated_by,omitempty"`
}

type _QqlTestCase QqlTestCase

// NewQqlTestCase instantiates a new QqlTestCase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQqlTestCase(testCaseId int64) *QqlTestCase {
	this := QqlTestCase{}
	this.TestCaseId = testCaseId
	return &this
}

// NewQqlTestCaseWithDefaults instantiates a new QqlTestCase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQqlTestCaseWithDefaults() *QqlTestCase {
	this := QqlTestCase{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *QqlTestCase) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QqlTestCase) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *QqlTestCase) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *QqlTestCase) SetId(v int64) {
	o.Id = &v
}

// GetTestCaseId returns the TestCaseId field value
func (o *QqlTestCase) GetTestCaseId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TestCaseId
}

// GetTestCaseIdOk returns a tuple with the TestCaseId field value
// and a boolean to check if the value has been set.
func (o *QqlTestCase) GetTestCaseIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TestCaseId, true
}

// SetTestCaseId sets field value
func (o *QqlTestCase) SetTestCaseId(v int64) {
	o.TestCaseId = v
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *QqlTestCase) GetPosition() int32 {
	if o == nil || IsNil(o.Position) {
		var ret int32
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QqlTestCase) GetPositionOk() (*int32, bool) {
	if o == nil || IsNil(o.Position) {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *QqlTestCase) HasPosition() bool {
	if o != nil && !IsNil(o.Position) {
		return true
	}

	return false
}

// SetPosition gets a reference to the given int32 and assigns it to the Position field.
func (o *QqlTestCase) SetPosition(v int32) {
	o.Position = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *QqlTestCase) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QqlTestCase) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *QqlTestCase) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *QqlTestCase) SetTitle(v string) {
	o.Title = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QqlTestCase) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QqlTestCase) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *QqlTestCase) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *QqlTestCase) SetDescription(v string) {
	o.Description.Set(&v)
}

// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *QqlTestCase) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *QqlTestCase) UnsetDescription() {
	o.Description.Unset()
}

// GetPreconditions returns the Preconditions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QqlTestCase) GetPreconditions() string {
	if o == nil || IsNil(o.Preconditions.Get()) {
		var ret string
		return ret
	}
	return *o.Preconditions.Get()
}

// GetPreconditionsOk returns a tuple with the Preconditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QqlTestCase) GetPreconditionsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Preconditions.Get(), o.Preconditions.IsSet()
}

// HasPreconditions returns a boolean if a field has been set.
func (o *QqlTestCase) HasPreconditions() bool {
	if o != nil && o.Preconditions.IsSet() {
		return true
	}

	return false
}

// SetPreconditions gets a reference to the given NullableString and assigns it to the Preconditions field.
func (o *QqlTestCase) SetPreconditions(v string) {
	o.Preconditions.Set(&v)
}

// SetPreconditionsNil sets the value for Preconditions to be an explicit nil
func (o *QqlTestCase) SetPreconditionsNil() {
	o.Preconditions.Set(nil)
}

// UnsetPreconditions ensures that no value is present for Preconditions, not even an explicit nil
func (o *QqlTestCase) UnsetPreconditions() {
	o.Preconditions.Unset()
}

// GetPostconditions returns the Postconditions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QqlTestCase) GetPostconditions() string {
	if o == nil || IsNil(o.Postconditions.Get()) {
		var ret string
		return ret
	}
	return *o.Postconditions.Get()
}

// GetPostconditionsOk returns a tuple with the Postconditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QqlTestCase) GetPostconditionsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Postconditions.Get(), o.Postconditions.IsSet()
}

// HasPostconditions returns a boolean if a field has been set.
func (o *QqlTestCase) HasPostconditions() bool {
	if o != nil && o.Postconditions.IsSet() {
		return true
	}

	return false
}

// SetPostconditions gets a reference to the given NullableString and assigns it to the Postconditions field.
func (o *QqlTestCase) SetPostconditions(v string) {
	o.Postconditions.Set(&v)
}

// SetPostconditionsNil sets the value for Postconditions to be an explicit nil
func (o *QqlTestCase) SetPostconditionsNil() {
	o.Postconditions.Set(nil)
}

// UnsetPostconditions ensures that no value is present for Postconditions, not even an explicit nil
func (o *QqlTestCase) UnsetPostconditions() {
	o.Postconditions.Unset()
}

// GetSeverity returns the Severity field value if set, zero value otherwise.
func (o *QqlTestCase) GetSeverity() int32 {
	if o == nil || IsNil(o.Severity) {
		var ret int32
		return ret
	}
	return *o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QqlTestCase) GetSeverityOk() (*int32, bool) {
	if o == nil || IsNil(o.Severity) {
		return nil, false
	}
	return o.Severity, true
}

// HasSeverity returns a boolean if a field has been set.
func (o *QqlTestCase) HasSeverity() bool {
	if o != nil && !IsNil(o.Severity) {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given int32 and assigns it to the Severity field.
func (o *QqlTestCase) SetSeverity(v int32) {
	o.Severity = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *QqlTestCase) GetPriority() int32 {
	if o == nil || IsNil(o.Priority) {
		var ret int32
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QqlTestCase) GetPriorityOk() (*int32, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *QqlTestCase) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given int32 and assigns it to the Priority field.
func (o *QqlTestCase) SetPriority(v int32) {
	o.Priority = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *QqlTestCase) GetType() int32 {
	if o == nil || IsNil(o.Type) {
		var ret int32
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QqlTestCase) GetTypeOk() (*int32, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *QqlTestCase) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given int32 and assigns it to the Type field.
func (o *QqlTestCase) SetType(v int32) {
	o.Type = &v
}

// GetLayer returns the Layer field value if set, zero value otherwise.
func (o *QqlTestCase) GetLayer() int32 {
	if o == nil || IsNil(o.Layer) {
		var ret int32
		return ret
	}
	return *o.Layer
}

// GetLayerOk returns a tuple with the Layer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QqlTestCase) GetLayerOk() (*int32, bool) {
	if o == nil || IsNil(o.Layer) {
		return nil, false
	}
	return o.Layer, true
}

// HasLayer returns a boolean if a field has been set.
func (o *QqlTestCase) HasLayer() bool {
	if o != nil && !IsNil(o.Layer) {
		return true
	}

	return false
}

// SetLayer gets a reference to the given int32 and assigns it to the Layer field.
func (o *QqlTestCase) SetLayer(v int32) {
	o.Layer = &v
}

// GetIsFlaky returns the IsFlaky field value if set, zero value otherwise.
func (o *QqlTestCase) GetIsFlaky() int32 {
	if o == nil || IsNil(o.IsFlaky) {
		var ret int32
		return ret
	}
	return *o.IsFlaky
}

// GetIsFlakyOk returns a tuple with the IsFlaky field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QqlTestCase) GetIsFlakyOk() (*int32, bool) {
	if o == nil || IsNil(o.IsFlaky) {
		return nil, false
	}
	return o.IsFlaky, true
}

// HasIsFlaky returns a boolean if a field has been set.
func (o *QqlTestCase) HasIsFlaky() bool {
	if o != nil && !IsNil(o.IsFlaky) {
		return true
	}

	return false
}

// SetIsFlaky gets a reference to the given int32 and assigns it to the IsFlaky field.
func (o *QqlTestCase) SetIsFlaky(v int32) {
	o.IsFlaky = &v
}

// GetBehavior returns the Behavior field value if set, zero value otherwise.
func (o *QqlTestCase) GetBehavior() int32 {
	if o == nil || IsNil(o.Behavior) {
		var ret int32
		return ret
	}
	return *o.Behavior
}

// GetBehaviorOk returns a tuple with the Behavior field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QqlTestCase) GetBehaviorOk() (*int32, bool) {
	if o == nil || IsNil(o.Behavior) {
		return nil, false
	}
	return o.Behavior, true
}

// HasBehavior returns a boolean if a field has been set.
func (o *QqlTestCase) HasBehavior() bool {
	if o != nil && !IsNil(o.Behavior) {
		return true
	}

	return false
}

// SetBehavior gets a reference to the given int32 and assigns it to the Behavior field.
func (o *QqlTestCase) SetBehavior(v int32) {
	o.Behavior = &v
}

// GetAutomation returns the Automation field value if set, zero value otherwise.
func (o *QqlTestCase) GetAutomation() int32 {
	if o == nil || IsNil(o.Automation) {
		var ret int32
		return ret
	}
	return *o.Automation
}

// GetAutomationOk returns a tuple with the Automation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QqlTestCase) GetAutomationOk() (*int32, bool) {
	if o == nil || IsNil(o.Automation) {
		return nil, false
	}
	return o.Automation, true
}

// HasAutomation returns a boolean if a field has been set.
func (o *QqlTestCase) HasAutomation() bool {
	if o != nil && !IsNil(o.Automation) {
		return true
	}

	return false
}

// SetAutomation gets a reference to the given int32 and assigns it to the Automation field.
func (o *QqlTestCase) SetAutomation(v int32) {
	o.Automation = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *QqlTestCase) GetStatus() int32 {
	if o == nil || IsNil(o.Status) {
		var ret int32
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QqlTestCase) GetStatusOk() (*int32, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *QqlTestCase) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given int32 and assigns it to the Status field.
func (o *QqlTestCase) SetStatus(v int32) {
	o.Status = &v
}

// GetMilestoneId returns the MilestoneId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QqlTestCase) GetMilestoneId() int64 {
	if o == nil || IsNil(o.MilestoneId.Get()) {
		var ret int64
		return ret
	}
	return *o.MilestoneId.Get()
}

// GetMilestoneIdOk returns a tuple with the MilestoneId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QqlTestCase) GetMilestoneIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.MilestoneId.Get(), o.MilestoneId.IsSet()
}

// HasMilestoneId returns a boolean if a field has been set.
func (o *QqlTestCase) HasMilestoneId() bool {
	if o != nil && o.MilestoneId.IsSet() {
		return true
	}

	return false
}

// SetMilestoneId gets a reference to the given NullableInt64 and assigns it to the MilestoneId field.
func (o *QqlTestCase) SetMilestoneId(v int64) {
	o.MilestoneId.Set(&v)
}

// SetMilestoneIdNil sets the value for MilestoneId to be an explicit nil
func (o *QqlTestCase) SetMilestoneIdNil() {
	o.MilestoneId.Set(nil)
}

// UnsetMilestoneId ensures that no value is present for MilestoneId, not even an explicit nil
func (o *QqlTestCase) UnsetMilestoneId() {
	o.MilestoneId.Unset()
}

// GetSuiteId returns the SuiteId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QqlTestCase) GetSuiteId() int64 {
	if o == nil || IsNil(o.SuiteId.Get()) {
		var ret int64
		return ret
	}
	return *o.SuiteId.Get()
}

// GetSuiteIdOk returns a tuple with the SuiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QqlTestCase) GetSuiteIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.SuiteId.Get(), o.SuiteId.IsSet()
}

// HasSuiteId returns a boolean if a field has been set.
func (o *QqlTestCase) HasSuiteId() bool {
	if o != nil && o.SuiteId.IsSet() {
		return true
	}

	return false
}

// SetSuiteId gets a reference to the given NullableInt64 and assigns it to the SuiteId field.
func (o *QqlTestCase) SetSuiteId(v int64) {
	o.SuiteId.Set(&v)
}

// SetSuiteIdNil sets the value for SuiteId to be an explicit nil
func (o *QqlTestCase) SetSuiteIdNil() {
	o.SuiteId.Set(nil)
}

// UnsetSuiteId ensures that no value is present for SuiteId, not even an explicit nil
func (o *QqlTestCase) UnsetSuiteId() {
	o.SuiteId.Unset()
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *QqlTestCase) GetCustomFields() []CustomFieldValue {
	if o == nil || IsNil(o.CustomFields) {
		var ret []CustomFieldValue
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QqlTestCase) GetCustomFieldsOk() ([]CustomFieldValue, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return nil, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *QqlTestCase) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given []CustomFieldValue and assigns it to the CustomFields field.
func (o *QqlTestCase) SetCustomFields(v []CustomFieldValue) {
	o.CustomFields = v
}

// GetAttachments returns the Attachments field value if set, zero value otherwise.
func (o *QqlTestCase) GetAttachments() []Attachment {
	if o == nil || IsNil(o.Attachments) {
		var ret []Attachment
		return ret
	}
	return o.Attachments
}

// GetAttachmentsOk returns a tuple with the Attachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QqlTestCase) GetAttachmentsOk() ([]Attachment, bool) {
	if o == nil || IsNil(o.Attachments) {
		return nil, false
	}
	return o.Attachments, true
}

// HasAttachments returns a boolean if a field has been set.
func (o *QqlTestCase) HasAttachments() bool {
	if o != nil && !IsNil(o.Attachments) {
		return true
	}

	return false
}

// SetAttachments gets a reference to the given []Attachment and assigns it to the Attachments field.
func (o *QqlTestCase) SetAttachments(v []Attachment) {
	o.Attachments = v
}

// GetStepsType returns the StepsType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QqlTestCase) GetStepsType() string {
	if o == nil || IsNil(o.StepsType.Get()) {
		var ret string
		return ret
	}
	return *o.StepsType.Get()
}

// GetStepsTypeOk returns a tuple with the StepsType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QqlTestCase) GetStepsTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StepsType.Get(), o.StepsType.IsSet()
}

// HasStepsType returns a boolean if a field has been set.
func (o *QqlTestCase) HasStepsType() bool {
	if o != nil && o.StepsType.IsSet() {
		return true
	}

	return false
}

// SetStepsType gets a reference to the given NullableString and assigns it to the StepsType field.
func (o *QqlTestCase) SetStepsType(v string) {
	o.StepsType.Set(&v)
}

// SetStepsTypeNil sets the value for StepsType to be an explicit nil
func (o *QqlTestCase) SetStepsTypeNil() {
	o.StepsType.Set(nil)
}

// UnsetStepsType ensures that no value is present for StepsType, not even an explicit nil
func (o *QqlTestCase) UnsetStepsType() {
	o.StepsType.Unset()
}

// GetSteps returns the Steps field value if set, zero value otherwise.
func (o *QqlTestCase) GetSteps() []TestStep {
	if o == nil || IsNil(o.Steps) {
		var ret []TestStep
		return ret
	}
	return o.Steps
}

// GetStepsOk returns a tuple with the Steps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QqlTestCase) GetStepsOk() ([]TestStep, bool) {
	if o == nil || IsNil(o.Steps) {
		return nil, false
	}
	return o.Steps, true
}

// HasSteps returns a boolean if a field has been set.
func (o *QqlTestCase) HasSteps() bool {
	if o != nil && !IsNil(o.Steps) {
		return true
	}

	return false
}

// SetSteps gets a reference to the given []TestStep and assigns it to the Steps field.
func (o *QqlTestCase) SetSteps(v []TestStep) {
	o.Steps = v
}

// GetParams returns the Params field value if set, zero value otherwise.
func (o *QqlTestCase) GetParams() TestCaseParams {
	if o == nil || IsNil(o.Params) {
		var ret TestCaseParams
		return ret
	}
	return *o.Params
}

// GetParamsOk returns a tuple with the Params field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QqlTestCase) GetParamsOk() (*TestCaseParams, bool) {
	if o == nil || IsNil(o.Params) {
		return nil, false
	}
	return o.Params, true
}

// HasParams returns a boolean if a field has been set.
func (o *QqlTestCase) HasParams() bool {
	if o != nil && !IsNil(o.Params) {
		return true
	}

	return false
}

// SetParams gets a reference to the given TestCaseParams and assigns it to the Params field.
func (o *QqlTestCase) SetParams(v TestCaseParams) {
	o.Params = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *QqlTestCase) GetTags() []TagValue {
	if o == nil || IsNil(o.Tags) {
		var ret []TagValue
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QqlTestCase) GetTagsOk() ([]TagValue, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *QqlTestCase) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []TagValue and assigns it to the Tags field.
func (o *QqlTestCase) SetTags(v []TagValue) {
	o.Tags = v
}

// GetMemberId returns the MemberId field value if set, zero value otherwise.
// Deprecated
func (o *QqlTestCase) GetMemberId() int64 {
	if o == nil || IsNil(o.MemberId) {
		var ret int64
		return ret
	}
	return *o.MemberId
}

// GetMemberIdOk returns a tuple with the MemberId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *QqlTestCase) GetMemberIdOk() (*int64, bool) {
	if o == nil || IsNil(o.MemberId) {
		return nil, false
	}
	return o.MemberId, true
}

// HasMemberId returns a boolean if a field has been set.
func (o *QqlTestCase) HasMemberId() bool {
	if o != nil && !IsNil(o.MemberId) {
		return true
	}

	return false
}

// SetMemberId gets a reference to the given int64 and assigns it to the MemberId field.
// Deprecated
func (o *QqlTestCase) SetMemberId(v int64) {
	o.MemberId = &v
}

// GetAuthorId returns the AuthorId field value if set, zero value otherwise.
func (o *QqlTestCase) GetAuthorId() int64 {
	if o == nil || IsNil(o.AuthorId) {
		var ret int64
		return ret
	}
	return *o.AuthorId
}

// GetAuthorIdOk returns a tuple with the AuthorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QqlTestCase) GetAuthorIdOk() (*int64, bool) {
	if o == nil || IsNil(o.AuthorId) {
		return nil, false
	}
	return o.AuthorId, true
}

// HasAuthorId returns a boolean if a field has been set.
func (o *QqlTestCase) HasAuthorId() bool {
	if o != nil && !IsNil(o.AuthorId) {
		return true
	}

	return false
}

// SetAuthorId gets a reference to the given int64 and assigns it to the AuthorId field.
func (o *QqlTestCase) SetAuthorId(v int64) {
	o.AuthorId = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *QqlTestCase) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QqlTestCase) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *QqlTestCase) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *QqlTestCase) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *QqlTestCase) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QqlTestCase) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *QqlTestCase) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *QqlTestCase) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetUpdatedBy returns the UpdatedBy field value if set, zero value otherwise.
func (o *QqlTestCase) GetUpdatedBy() int64 {
	if o == nil || IsNil(o.UpdatedBy) {
		var ret int64
		return ret
	}
	return *o.UpdatedBy
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QqlTestCase) GetUpdatedByOk() (*int64, bool) {
	if o == nil || IsNil(o.UpdatedBy) {
		return nil, false
	}
	return o.UpdatedBy, true
}

// HasUpdatedBy returns a boolean if a field has been set.
func (o *QqlTestCase) HasUpdatedBy() bool {
	if o != nil && !IsNil(o.UpdatedBy) {
		return true
	}

	return false
}

// SetUpdatedBy gets a reference to the given int64 and assigns it to the UpdatedBy field.
func (o *QqlTestCase) SetUpdatedBy(v int64) {
	o.UpdatedBy = &v
}

func (o QqlTestCase) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QqlTestCase) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["test_case_id"] = o.TestCaseId
	if !IsNil(o.Position) {
		toSerialize["position"] = o.Position
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.Preconditions.IsSet() {
		toSerialize["preconditions"] = o.Preconditions.Get()
	}
	if o.Postconditions.IsSet() {
		toSerialize["postconditions"] = o.Postconditions.Get()
	}
	if !IsNil(o.Severity) {
		toSerialize["severity"] = o.Severity
	}
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Layer) {
		toSerialize["layer"] = o.Layer
	}
	if !IsNil(o.IsFlaky) {
		toSerialize["is_flaky"] = o.IsFlaky
	}
	if !IsNil(o.Behavior) {
		toSerialize["behavior"] = o.Behavior
	}
	if !IsNil(o.Automation) {
		toSerialize["automation"] = o.Automation
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if o.MilestoneId.IsSet() {
		toSerialize["milestone_id"] = o.MilestoneId.Get()
	}
	if o.SuiteId.IsSet() {
		toSerialize["suite_id"] = o.SuiteId.Get()
	}
	if !IsNil(o.CustomFields) {
		toSerialize["custom_fields"] = o.CustomFields
	}
	if !IsNil(o.Attachments) {
		toSerialize["attachments"] = o.Attachments
	}
	if o.StepsType.IsSet() {
		toSerialize["steps_type"] = o.StepsType.Get()
	}
	if !IsNil(o.Steps) {
		toSerialize["steps"] = o.Steps
	}
	if !IsNil(o.Params) {
		toSerialize["params"] = o.Params
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.MemberId) {
		toSerialize["member_id"] = o.MemberId
	}
	if !IsNil(o.AuthorId) {
		toSerialize["author_id"] = o.AuthorId
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.UpdatedBy) {
		toSerialize["updated_by"] = o.UpdatedBy
	}
	return toSerialize, nil
}

func (o *QqlTestCase) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"test_case_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQqlTestCase := _QqlTestCase{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varQqlTestCase)

	if err != nil {
		return err
	}

	*o = QqlTestCase(varQqlTestCase)

	return err
}

type NullableQqlTestCase struct {
	value *QqlTestCase
	isSet bool
}

func (v NullableQqlTestCase) Get() *QqlTestCase {
	return v.value
}

func (v *NullableQqlTestCase) Set(val *QqlTestCase) {
	v.value = val
	v.isSet = true
}

func (v NullableQqlTestCase) IsSet() bool {
	return v.isSet
}

func (v *NullableQqlTestCase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQqlTestCase(val *QqlTestCase) *NullableQqlTestCase {
	return &NullableQqlTestCase{value: val, isSet: true}
}

func (v NullableQqlTestCase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQqlTestCase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
