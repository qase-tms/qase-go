/*
Qase.io TestOps API v1

Qase TestOps API v1 Specification.

API version: 1.0.0
Contact: support@qase.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v1_client

import (
	"encoding/json"
)

// checks if the AttachmentGet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AttachmentGet{}

// AttachmentGet struct for AttachmentGet
type AttachmentGet struct {
	Hash      *string `json:"hash,omitempty"`
	File      *string `json:"file,omitempty"`
	Mime      *string `json:"mime,omitempty"`
	Size      *int32  `json:"size,omitempty"`
	Extension *string `json:"extension,omitempty"`
	FullPath  *string `json:"full_path,omitempty"`
	Url       *string `json:"url,omitempty"`
}

// NewAttachmentGet instantiates a new AttachmentGet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttachmentGet() *AttachmentGet {
	this := AttachmentGet{}
	return &this
}

// NewAttachmentGetWithDefaults instantiates a new AttachmentGet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttachmentGetWithDefaults() *AttachmentGet {
	this := AttachmentGet{}
	return &this
}

// GetHash returns the Hash field value if set, zero value otherwise.
func (o *AttachmentGet) GetHash() string {
	if o == nil || IsNil(o.Hash) {
		var ret string
		return ret
	}
	return *o.Hash
}

// GetHashOk returns a tuple with the Hash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttachmentGet) GetHashOk() (*string, bool) {
	if o == nil || IsNil(o.Hash) {
		return nil, false
	}
	return o.Hash, true
}

// HasHash returns a boolean if a field has been set.
func (o *AttachmentGet) HasHash() bool {
	if o != nil && !IsNil(o.Hash) {
		return true
	}

	return false
}

// SetHash gets a reference to the given string and assigns it to the Hash field.
func (o *AttachmentGet) SetHash(v string) {
	o.Hash = &v
}

// GetFile returns the File field value if set, zero value otherwise.
func (o *AttachmentGet) GetFile() string {
	if o == nil || IsNil(o.File) {
		var ret string
		return ret
	}
	return *o.File
}

// GetFileOk returns a tuple with the File field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttachmentGet) GetFileOk() (*string, bool) {
	if o == nil || IsNil(o.File) {
		return nil, false
	}
	return o.File, true
}

// HasFile returns a boolean if a field has been set.
func (o *AttachmentGet) HasFile() bool {
	if o != nil && !IsNil(o.File) {
		return true
	}

	return false
}

// SetFile gets a reference to the given string and assigns it to the File field.
func (o *AttachmentGet) SetFile(v string) {
	o.File = &v
}

// GetMime returns the Mime field value if set, zero value otherwise.
func (o *AttachmentGet) GetMime() string {
	if o == nil || IsNil(o.Mime) {
		var ret string
		return ret
	}
	return *o.Mime
}

// GetMimeOk returns a tuple with the Mime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttachmentGet) GetMimeOk() (*string, bool) {
	if o == nil || IsNil(o.Mime) {
		return nil, false
	}
	return o.Mime, true
}

// HasMime returns a boolean if a field has been set.
func (o *AttachmentGet) HasMime() bool {
	if o != nil && !IsNil(o.Mime) {
		return true
	}

	return false
}

// SetMime gets a reference to the given string and assigns it to the Mime field.
func (o *AttachmentGet) SetMime(v string) {
	o.Mime = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *AttachmentGet) GetSize() int32 {
	if o == nil || IsNil(o.Size) {
		var ret int32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttachmentGet) GetSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *AttachmentGet) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int32 and assigns it to the Size field.
func (o *AttachmentGet) SetSize(v int32) {
	o.Size = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *AttachmentGet) GetExtension() string {
	if o == nil || IsNil(o.Extension) {
		var ret string
		return ret
	}
	return *o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttachmentGet) GetExtensionOk() (*string, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *AttachmentGet) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given string and assigns it to the Extension field.
func (o *AttachmentGet) SetExtension(v string) {
	o.Extension = &v
}

// GetFullPath returns the FullPath field value if set, zero value otherwise.
func (o *AttachmentGet) GetFullPath() string {
	if o == nil || IsNil(o.FullPath) {
		var ret string
		return ret
	}
	return *o.FullPath
}

// GetFullPathOk returns a tuple with the FullPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttachmentGet) GetFullPathOk() (*string, bool) {
	if o == nil || IsNil(o.FullPath) {
		return nil, false
	}
	return o.FullPath, true
}

// HasFullPath returns a boolean if a field has been set.
func (o *AttachmentGet) HasFullPath() bool {
	if o != nil && !IsNil(o.FullPath) {
		return true
	}

	return false
}

// SetFullPath gets a reference to the given string and assigns it to the FullPath field.
func (o *AttachmentGet) SetFullPath(v string) {
	o.FullPath = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *AttachmentGet) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttachmentGet) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *AttachmentGet) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *AttachmentGet) SetUrl(v string) {
	o.Url = &v
}

func (o AttachmentGet) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AttachmentGet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Hash) {
		toSerialize["hash"] = o.Hash
	}
	if !IsNil(o.File) {
		toSerialize["file"] = o.File
	}
	if !IsNil(o.Mime) {
		toSerialize["mime"] = o.Mime
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.FullPath) {
		toSerialize["full_path"] = o.FullPath
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableAttachmentGet struct {
	value *AttachmentGet
	isSet bool
}

func (v NullableAttachmentGet) Get() *AttachmentGet {
	return v.value
}

func (v *NullableAttachmentGet) Set(val *AttachmentGet) {
	v.value = val
	v.isSet = true
}

func (v NullableAttachmentGet) IsSet() bool {
	return v.isSet
}

func (v *NullableAttachmentGet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttachmentGet(val *AttachmentGet) *NullableAttachmentGet {
	return &NullableAttachmentGet{value: val, isSet: true}
}

func (v NullableAttachmentGet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttachmentGet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
