/*
Qase.io TestOps API v1

Qase TestOps API v1 Specification.

API version: 1.0.0
Contact: support@qase.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v1_client

import (
	"encoding/json"
)

// checks if the RunStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RunStats{}

// RunStats struct for RunStats
type RunStats struct {
	Total    *int32            `json:"total,omitempty"`
	Statuses *map[string]int32 `json:"statuses,omitempty"`
	// Deprecated
	Untested *int32 `json:"untested,omitempty"`
	// Deprecated
	Passed *int32 `json:"passed,omitempty"`
	// Deprecated
	Failed *int32 `json:"failed,omitempty"`
	// Deprecated
	Blocked *int32 `json:"blocked,omitempty"`
	// Deprecated
	Skipped *int32 `json:"skipped,omitempty"`
	// Deprecated
	Retest *int32 `json:"retest,omitempty"`
	// Deprecated
	InProgress *int32 `json:"in_progress,omitempty"`
	// Deprecated
	Invalid *int32 `json:"invalid,omitempty"`
}

// NewRunStats instantiates a new RunStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunStats() *RunStats {
	this := RunStats{}
	return &this
}

// NewRunStatsWithDefaults instantiates a new RunStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunStatsWithDefaults() *RunStats {
	this := RunStats{}
	return &this
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *RunStats) GetTotal() int32 {
	if o == nil || IsNil(o.Total) {
		var ret int32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunStats) GetTotalOk() (*int32, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *RunStats) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int32 and assigns it to the Total field.
func (o *RunStats) SetTotal(v int32) {
	o.Total = &v
}

// GetStatuses returns the Statuses field value if set, zero value otherwise.
func (o *RunStats) GetStatuses() map[string]int32 {
	if o == nil || IsNil(o.Statuses) {
		var ret map[string]int32
		return ret
	}
	return *o.Statuses
}

// GetStatusesOk returns a tuple with the Statuses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunStats) GetStatusesOk() (*map[string]int32, bool) {
	if o == nil || IsNil(o.Statuses) {
		return nil, false
	}
	return o.Statuses, true
}

// HasStatuses returns a boolean if a field has been set.
func (o *RunStats) HasStatuses() bool {
	if o != nil && !IsNil(o.Statuses) {
		return true
	}

	return false
}

// SetStatuses gets a reference to the given map[string]int32 and assigns it to the Statuses field.
func (o *RunStats) SetStatuses(v map[string]int32) {
	o.Statuses = &v
}

// GetUntested returns the Untested field value if set, zero value otherwise.
// Deprecated
func (o *RunStats) GetUntested() int32 {
	if o == nil || IsNil(o.Untested) {
		var ret int32
		return ret
	}
	return *o.Untested
}

// GetUntestedOk returns a tuple with the Untested field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *RunStats) GetUntestedOk() (*int32, bool) {
	if o == nil || IsNil(o.Untested) {
		return nil, false
	}
	return o.Untested, true
}

// HasUntested returns a boolean if a field has been set.
func (o *RunStats) HasUntested() bool {
	if o != nil && !IsNil(o.Untested) {
		return true
	}

	return false
}

// SetUntested gets a reference to the given int32 and assigns it to the Untested field.
// Deprecated
func (o *RunStats) SetUntested(v int32) {
	o.Untested = &v
}

// GetPassed returns the Passed field value if set, zero value otherwise.
// Deprecated
func (o *RunStats) GetPassed() int32 {
	if o == nil || IsNil(o.Passed) {
		var ret int32
		return ret
	}
	return *o.Passed
}

// GetPassedOk returns a tuple with the Passed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *RunStats) GetPassedOk() (*int32, bool) {
	if o == nil || IsNil(o.Passed) {
		return nil, false
	}
	return o.Passed, true
}

// HasPassed returns a boolean if a field has been set.
func (o *RunStats) HasPassed() bool {
	if o != nil && !IsNil(o.Passed) {
		return true
	}

	return false
}

// SetPassed gets a reference to the given int32 and assigns it to the Passed field.
// Deprecated
func (o *RunStats) SetPassed(v int32) {
	o.Passed = &v
}

// GetFailed returns the Failed field value if set, zero value otherwise.
// Deprecated
func (o *RunStats) GetFailed() int32 {
	if o == nil || IsNil(o.Failed) {
		var ret int32
		return ret
	}
	return *o.Failed
}

// GetFailedOk returns a tuple with the Failed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *RunStats) GetFailedOk() (*int32, bool) {
	if o == nil || IsNil(o.Failed) {
		return nil, false
	}
	return o.Failed, true
}

// HasFailed returns a boolean if a field has been set.
func (o *RunStats) HasFailed() bool {
	if o != nil && !IsNil(o.Failed) {
		return true
	}

	return false
}

// SetFailed gets a reference to the given int32 and assigns it to the Failed field.
// Deprecated
func (o *RunStats) SetFailed(v int32) {
	o.Failed = &v
}

// GetBlocked returns the Blocked field value if set, zero value otherwise.
// Deprecated
func (o *RunStats) GetBlocked() int32 {
	if o == nil || IsNil(o.Blocked) {
		var ret int32
		return ret
	}
	return *o.Blocked
}

// GetBlockedOk returns a tuple with the Blocked field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *RunStats) GetBlockedOk() (*int32, bool) {
	if o == nil || IsNil(o.Blocked) {
		return nil, false
	}
	return o.Blocked, true
}

// HasBlocked returns a boolean if a field has been set.
func (o *RunStats) HasBlocked() bool {
	if o != nil && !IsNil(o.Blocked) {
		return true
	}

	return false
}

// SetBlocked gets a reference to the given int32 and assigns it to the Blocked field.
// Deprecated
func (o *RunStats) SetBlocked(v int32) {
	o.Blocked = &v
}

// GetSkipped returns the Skipped field value if set, zero value otherwise.
// Deprecated
func (o *RunStats) GetSkipped() int32 {
	if o == nil || IsNil(o.Skipped) {
		var ret int32
		return ret
	}
	return *o.Skipped
}

// GetSkippedOk returns a tuple with the Skipped field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *RunStats) GetSkippedOk() (*int32, bool) {
	if o == nil || IsNil(o.Skipped) {
		return nil, false
	}
	return o.Skipped, true
}

// HasSkipped returns a boolean if a field has been set.
func (o *RunStats) HasSkipped() bool {
	if o != nil && !IsNil(o.Skipped) {
		return true
	}

	return false
}

// SetSkipped gets a reference to the given int32 and assigns it to the Skipped field.
// Deprecated
func (o *RunStats) SetSkipped(v int32) {
	o.Skipped = &v
}

// GetRetest returns the Retest field value if set, zero value otherwise.
// Deprecated
func (o *RunStats) GetRetest() int32 {
	if o == nil || IsNil(o.Retest) {
		var ret int32
		return ret
	}
	return *o.Retest
}

// GetRetestOk returns a tuple with the Retest field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *RunStats) GetRetestOk() (*int32, bool) {
	if o == nil || IsNil(o.Retest) {
		return nil, false
	}
	return o.Retest, true
}

// HasRetest returns a boolean if a field has been set.
func (o *RunStats) HasRetest() bool {
	if o != nil && !IsNil(o.Retest) {
		return true
	}

	return false
}

// SetRetest gets a reference to the given int32 and assigns it to the Retest field.
// Deprecated
func (o *RunStats) SetRetest(v int32) {
	o.Retest = &v
}

// GetInProgress returns the InProgress field value if set, zero value otherwise.
// Deprecated
func (o *RunStats) GetInProgress() int32 {
	if o == nil || IsNil(o.InProgress) {
		var ret int32
		return ret
	}
	return *o.InProgress
}

// GetInProgressOk returns a tuple with the InProgress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *RunStats) GetInProgressOk() (*int32, bool) {
	if o == nil || IsNil(o.InProgress) {
		return nil, false
	}
	return o.InProgress, true
}

// HasInProgress returns a boolean if a field has been set.
func (o *RunStats) HasInProgress() bool {
	if o != nil && !IsNil(o.InProgress) {
		return true
	}

	return false
}

// SetInProgress gets a reference to the given int32 and assigns it to the InProgress field.
// Deprecated
func (o *RunStats) SetInProgress(v int32) {
	o.InProgress = &v
}

// GetInvalid returns the Invalid field value if set, zero value otherwise.
// Deprecated
func (o *RunStats) GetInvalid() int32 {
	if o == nil || IsNil(o.Invalid) {
		var ret int32
		return ret
	}
	return *o.Invalid
}

// GetInvalidOk returns a tuple with the Invalid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *RunStats) GetInvalidOk() (*int32, bool) {
	if o == nil || IsNil(o.Invalid) {
		return nil, false
	}
	return o.Invalid, true
}

// HasInvalid returns a boolean if a field has been set.
func (o *RunStats) HasInvalid() bool {
	if o != nil && !IsNil(o.Invalid) {
		return true
	}

	return false
}

// SetInvalid gets a reference to the given int32 and assigns it to the Invalid field.
// Deprecated
func (o *RunStats) SetInvalid(v int32) {
	o.Invalid = &v
}

func (o RunStats) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RunStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	if !IsNil(o.Statuses) {
		toSerialize["statuses"] = o.Statuses
	}
	if !IsNil(o.Untested) {
		toSerialize["untested"] = o.Untested
	}
	if !IsNil(o.Passed) {
		toSerialize["passed"] = o.Passed
	}
	if !IsNil(o.Failed) {
		toSerialize["failed"] = o.Failed
	}
	if !IsNil(o.Blocked) {
		toSerialize["blocked"] = o.Blocked
	}
	if !IsNil(o.Skipped) {
		toSerialize["skipped"] = o.Skipped
	}
	if !IsNil(o.Retest) {
		toSerialize["retest"] = o.Retest
	}
	if !IsNil(o.InProgress) {
		toSerialize["in_progress"] = o.InProgress
	}
	if !IsNil(o.Invalid) {
		toSerialize["invalid"] = o.Invalid
	}
	return toSerialize, nil
}

type NullableRunStats struct {
	value *RunStats
	isSet bool
}

func (v NullableRunStats) Get() *RunStats {
	return v.value
}

func (v *NullableRunStats) Set(val *RunStats) {
	v.value = val
	v.isSet = true
}

func (v NullableRunStats) IsSet() bool {
	return v.isSet
}

func (v *NullableRunStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunStats(val *RunStats) *NullableRunStats {
	return &NullableRunStats{value: val, isSet: true}
}

func (v NullableRunStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
