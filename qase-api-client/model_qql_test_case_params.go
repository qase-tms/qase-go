/*
Qase.io TestOps API v1

Qase TestOps API v1 Specification.

API version: 1.0.0
Contact: support@qase.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v1_client

import (
	"encoding/json"
	"fmt"
)

// QqlTestCaseParams struct for QqlTestCaseParams
type QqlTestCaseParams struct {
	params *[]map[string]interface{}
	param  *map[string]interface{}
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *QqlTestCaseParams) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into []map[string]interface{}
	err = json.Unmarshal(data, &dst.params);
	if err == nil {
		json, _ := json.Marshal(dst.params)
		if string(json) == "{}" { // empty struct
			dst.params = nil
		} else {
			return nil // data stored in dst.[]map[string]interface{}, return on the first match
		}
	} else {
		dst.params = nil
	}

	// try to unmarshal JSON data into map[string]interface{}
	err = json.Unmarshal(data, &dst.param);
	if err == nil {
		json, _ := json.Marshal(dst.param)
		if string(json) == "{}" { // empty struct
			dst.param = nil
		} else {
			return nil // data stored in dst.map[string]interface{}, return on the first match
		}
	} else {
		dst.param = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(QqlTestCaseParams)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *QqlTestCaseParams) MarshalJSON() ([]byte, error) {
	if src.params != nil {
		return json.Marshal(&src.params)
	}

	if src.param != nil {
		return json.Marshal(&src.param)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableQqlTestCaseParams struct {
	value *QqlTestCaseParams
	isSet bool
}

func (v NullableQqlTestCaseParams) Get() *QqlTestCaseParams {
	return v.value
}

func (v *NullableQqlTestCaseParams) Set(val *QqlTestCaseParams) {
	v.value = val
	v.isSet = true
}

func (v NullableQqlTestCaseParams) IsSet() bool {
	return v.isSet
}

func (v *NullableQqlTestCaseParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQqlTestCaseParams(val *QqlTestCaseParams) *NullableQqlTestCaseParams {
	return &NullableQqlTestCaseParams{value: val, isSet: true}
}

func (v NullableQqlTestCaseParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQqlTestCaseParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


