/*
Qase.io TestOps API v1

Qase TestOps API v1 Specification.

API version: 1.0.0
Contact: support@qase.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v1_client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ConfigurationCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigurationCreate{}

// ConfigurationCreate struct for ConfigurationCreate
type ConfigurationCreate struct {
	Title   string `json:"title"`
	GroupId int32  `json:"group_id"`
}

type _ConfigurationCreate ConfigurationCreate

// NewConfigurationCreate instantiates a new ConfigurationCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigurationCreate(title string, groupId int32) *ConfigurationCreate {
	this := ConfigurationCreate{}
	this.Title = title
	this.GroupId = groupId
	return &this
}

// NewConfigurationCreateWithDefaults instantiates a new ConfigurationCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigurationCreateWithDefaults() *ConfigurationCreate {
	this := ConfigurationCreate{}
	return &this
}

// GetTitle returns the Title field value
func (o *ConfigurationCreate) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *ConfigurationCreate) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *ConfigurationCreate) SetTitle(v string) {
	o.Title = v
}

// GetGroupId returns the GroupId field value
func (o *ConfigurationCreate) GetGroupId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value
// and a boolean to check if the value has been set.
func (o *ConfigurationCreate) GetGroupIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupId, true
}

// SetGroupId sets field value
func (o *ConfigurationCreate) SetGroupId(v int32) {
	o.GroupId = v
}

func (o ConfigurationCreate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigurationCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["title"] = o.Title
	toSerialize["group_id"] = o.GroupId
	return toSerialize, nil
}

func (o *ConfigurationCreate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"title",
		"group_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConfigurationCreate := _ConfigurationCreate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConfigurationCreate)

	if err != nil {
		return err
	}

	*o = ConfigurationCreate(varConfigurationCreate)

	return err
}

type NullableConfigurationCreate struct {
	value *ConfigurationCreate
	isSet bool
}

func (v NullableConfigurationCreate) Get() *ConfigurationCreate {
	return v.value
}

func (v *NullableConfigurationCreate) Set(val *ConfigurationCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigurationCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigurationCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigurationCreate(val *ConfigurationCreate) *NullableConfigurationCreate {
	return &NullableConfigurationCreate{value: val, isSet: true}
}

func (v NullableConfigurationCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigurationCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
