/*
Qase.io TestOps API v1

Qase TestOps API v1 Specification.

API version: 1.0.0
Contact: support@qase.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v1_client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CustomFieldUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomFieldUpdate{}

// CustomFieldUpdate struct for CustomFieldUpdate
type CustomFieldUpdate struct {
	Title string                        `json:"title"`
	Value []CustomFieldCreateValueInner `json:"value,omitempty"`
	// Dictionary of old values and their replacemants
	ReplaceValues           map[string]string `json:"replace_values,omitempty"`
	Placeholder             NullableString    `json:"placeholder,omitempty"`
	DefaultValue            NullableString    `json:"default_value,omitempty"`
	IsFilterable            *bool             `json:"is_filterable,omitempty"`
	IsVisible               *bool             `json:"is_visible,omitempty"`
	IsRequired              *bool             `json:"is_required,omitempty"`
	IsEnabledForAllProjects *bool             `json:"is_enabled_for_all_projects,omitempty"`
	ProjectsCodes           []string          `json:"projects_codes,omitempty"`
}

type _CustomFieldUpdate CustomFieldUpdate

// NewCustomFieldUpdate instantiates a new CustomFieldUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomFieldUpdate(title string) *CustomFieldUpdate {
	this := CustomFieldUpdate{}
	this.Title = title
	return &this
}

// NewCustomFieldUpdateWithDefaults instantiates a new CustomFieldUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomFieldUpdateWithDefaults() *CustomFieldUpdate {
	this := CustomFieldUpdate{}
	return &this
}

// GetTitle returns the Title field value
func (o *CustomFieldUpdate) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *CustomFieldUpdate) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *CustomFieldUpdate) SetTitle(v string) {
	o.Title = v
}

// GetValue returns the Value field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CustomFieldUpdate) GetValue() []CustomFieldCreateValueInner {
	if o == nil {
		var ret []CustomFieldCreateValueInner
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CustomFieldUpdate) GetValueOk() ([]CustomFieldCreateValueInner, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *CustomFieldUpdate) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given []CustomFieldCreateValueInner and assigns it to the Value field.
func (o *CustomFieldUpdate) SetValue(v []CustomFieldCreateValueInner) {
	o.Value = v
}

// GetReplaceValues returns the ReplaceValues field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CustomFieldUpdate) GetReplaceValues() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.ReplaceValues
}

// GetReplaceValuesOk returns a tuple with the ReplaceValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CustomFieldUpdate) GetReplaceValuesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.ReplaceValues) {
		return nil, false
	}
	return &o.ReplaceValues, true
}

// HasReplaceValues returns a boolean if a field has been set.
func (o *CustomFieldUpdate) HasReplaceValues() bool {
	if o != nil && !IsNil(o.ReplaceValues) {
		return true
	}

	return false
}

// SetReplaceValues gets a reference to the given map[string]string and assigns it to the ReplaceValues field.
func (o *CustomFieldUpdate) SetReplaceValues(v map[string]string) {
	o.ReplaceValues = v
}

// GetPlaceholder returns the Placeholder field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CustomFieldUpdate) GetPlaceholder() string {
	if o == nil || IsNil(o.Placeholder.Get()) {
		var ret string
		return ret
	}
	return *o.Placeholder.Get()
}

// GetPlaceholderOk returns a tuple with the Placeholder field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CustomFieldUpdate) GetPlaceholderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Placeholder.Get(), o.Placeholder.IsSet()
}

// HasPlaceholder returns a boolean if a field has been set.
func (o *CustomFieldUpdate) HasPlaceholder() bool {
	if o != nil && o.Placeholder.IsSet() {
		return true
	}

	return false
}

// SetPlaceholder gets a reference to the given NullableString and assigns it to the Placeholder field.
func (o *CustomFieldUpdate) SetPlaceholder(v string) {
	o.Placeholder.Set(&v)
}

// SetPlaceholderNil sets the value for Placeholder to be an explicit nil
func (o *CustomFieldUpdate) SetPlaceholderNil() {
	o.Placeholder.Set(nil)
}

// UnsetPlaceholder ensures that no value is present for Placeholder, not even an explicit nil
func (o *CustomFieldUpdate) UnsetPlaceholder() {
	o.Placeholder.Unset()
}

// GetDefaultValue returns the DefaultValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CustomFieldUpdate) GetDefaultValue() string {
	if o == nil || IsNil(o.DefaultValue.Get()) {
		var ret string
		return ret
	}
	return *o.DefaultValue.Get()
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CustomFieldUpdate) GetDefaultValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultValue.Get(), o.DefaultValue.IsSet()
}

// HasDefaultValue returns a boolean if a field has been set.
func (o *CustomFieldUpdate) HasDefaultValue() bool {
	if o != nil && o.DefaultValue.IsSet() {
		return true
	}

	return false
}

// SetDefaultValue gets a reference to the given NullableString and assigns it to the DefaultValue field.
func (o *CustomFieldUpdate) SetDefaultValue(v string) {
	o.DefaultValue.Set(&v)
}

// SetDefaultValueNil sets the value for DefaultValue to be an explicit nil
func (o *CustomFieldUpdate) SetDefaultValueNil() {
	o.DefaultValue.Set(nil)
}

// UnsetDefaultValue ensures that no value is present for DefaultValue, not even an explicit nil
func (o *CustomFieldUpdate) UnsetDefaultValue() {
	o.DefaultValue.Unset()
}

// GetIsFilterable returns the IsFilterable field value if set, zero value otherwise.
func (o *CustomFieldUpdate) GetIsFilterable() bool {
	if o == nil || IsNil(o.IsFilterable) {
		var ret bool
		return ret
	}
	return *o.IsFilterable
}

// GetIsFilterableOk returns a tuple with the IsFilterable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomFieldUpdate) GetIsFilterableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsFilterable) {
		return nil, false
	}
	return o.IsFilterable, true
}

// HasIsFilterable returns a boolean if a field has been set.
func (o *CustomFieldUpdate) HasIsFilterable() bool {
	if o != nil && !IsNil(o.IsFilterable) {
		return true
	}

	return false
}

// SetIsFilterable gets a reference to the given bool and assigns it to the IsFilterable field.
func (o *CustomFieldUpdate) SetIsFilterable(v bool) {
	o.IsFilterable = &v
}

// GetIsVisible returns the IsVisible field value if set, zero value otherwise.
func (o *CustomFieldUpdate) GetIsVisible() bool {
	if o == nil || IsNil(o.IsVisible) {
		var ret bool
		return ret
	}
	return *o.IsVisible
}

// GetIsVisibleOk returns a tuple with the IsVisible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomFieldUpdate) GetIsVisibleOk() (*bool, bool) {
	if o == nil || IsNil(o.IsVisible) {
		return nil, false
	}
	return o.IsVisible, true
}

// HasIsVisible returns a boolean if a field has been set.
func (o *CustomFieldUpdate) HasIsVisible() bool {
	if o != nil && !IsNil(o.IsVisible) {
		return true
	}

	return false
}

// SetIsVisible gets a reference to the given bool and assigns it to the IsVisible field.
func (o *CustomFieldUpdate) SetIsVisible(v bool) {
	o.IsVisible = &v
}

// GetIsRequired returns the IsRequired field value if set, zero value otherwise.
func (o *CustomFieldUpdate) GetIsRequired() bool {
	if o == nil || IsNil(o.IsRequired) {
		var ret bool
		return ret
	}
	return *o.IsRequired
}

// GetIsRequiredOk returns a tuple with the IsRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomFieldUpdate) GetIsRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.IsRequired) {
		return nil, false
	}
	return o.IsRequired, true
}

// HasIsRequired returns a boolean if a field has been set.
func (o *CustomFieldUpdate) HasIsRequired() bool {
	if o != nil && !IsNil(o.IsRequired) {
		return true
	}

	return false
}

// SetIsRequired gets a reference to the given bool and assigns it to the IsRequired field.
func (o *CustomFieldUpdate) SetIsRequired(v bool) {
	o.IsRequired = &v
}

// GetIsEnabledForAllProjects returns the IsEnabledForAllProjects field value if set, zero value otherwise.
func (o *CustomFieldUpdate) GetIsEnabledForAllProjects() bool {
	if o == nil || IsNil(o.IsEnabledForAllProjects) {
		var ret bool
		return ret
	}
	return *o.IsEnabledForAllProjects
}

// GetIsEnabledForAllProjectsOk returns a tuple with the IsEnabledForAllProjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomFieldUpdate) GetIsEnabledForAllProjectsOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEnabledForAllProjects) {
		return nil, false
	}
	return o.IsEnabledForAllProjects, true
}

// HasIsEnabledForAllProjects returns a boolean if a field has been set.
func (o *CustomFieldUpdate) HasIsEnabledForAllProjects() bool {
	if o != nil && !IsNil(o.IsEnabledForAllProjects) {
		return true
	}

	return false
}

// SetIsEnabledForAllProjects gets a reference to the given bool and assigns it to the IsEnabledForAllProjects field.
func (o *CustomFieldUpdate) SetIsEnabledForAllProjects(v bool) {
	o.IsEnabledForAllProjects = &v
}

// GetProjectsCodes returns the ProjectsCodes field value if set, zero value otherwise.
func (o *CustomFieldUpdate) GetProjectsCodes() []string {
	if o == nil || IsNil(o.ProjectsCodes) {
		var ret []string
		return ret
	}
	return o.ProjectsCodes
}

// GetProjectsCodesOk returns a tuple with the ProjectsCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomFieldUpdate) GetProjectsCodesOk() ([]string, bool) {
	if o == nil || IsNil(o.ProjectsCodes) {
		return nil, false
	}
	return o.ProjectsCodes, true
}

// HasProjectsCodes returns a boolean if a field has been set.
func (o *CustomFieldUpdate) HasProjectsCodes() bool {
	if o != nil && !IsNil(o.ProjectsCodes) {
		return true
	}

	return false
}

// SetProjectsCodes gets a reference to the given []string and assigns it to the ProjectsCodes field.
func (o *CustomFieldUpdate) SetProjectsCodes(v []string) {
	o.ProjectsCodes = v
}

func (o CustomFieldUpdate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomFieldUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["title"] = o.Title
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if o.ReplaceValues != nil {
		toSerialize["replace_values"] = o.ReplaceValues
	}
	if o.Placeholder.IsSet() {
		toSerialize["placeholder"] = o.Placeholder.Get()
	}
	if o.DefaultValue.IsSet() {
		toSerialize["default_value"] = o.DefaultValue.Get()
	}
	if !IsNil(o.IsFilterable) {
		toSerialize["is_filterable"] = o.IsFilterable
	}
	if !IsNil(o.IsVisible) {
		toSerialize["is_visible"] = o.IsVisible
	}
	if !IsNil(o.IsRequired) {
		toSerialize["is_required"] = o.IsRequired
	}
	if !IsNil(o.IsEnabledForAllProjects) {
		toSerialize["is_enabled_for_all_projects"] = o.IsEnabledForAllProjects
	}
	if !IsNil(o.ProjectsCodes) {
		toSerialize["projects_codes"] = o.ProjectsCodes
	}
	return toSerialize, nil
}

func (o *CustomFieldUpdate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"title",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCustomFieldUpdate := _CustomFieldUpdate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCustomFieldUpdate)

	if err != nil {
		return err
	}

	*o = CustomFieldUpdate(varCustomFieldUpdate)

	return err
}

type NullableCustomFieldUpdate struct {
	value *CustomFieldUpdate
	isSet bool
}

func (v NullableCustomFieldUpdate) Get() *CustomFieldUpdate {
	return v.value
}

func (v *NullableCustomFieldUpdate) Set(val *CustomFieldUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomFieldUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomFieldUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomFieldUpdate(val *CustomFieldUpdate) *NullableCustomFieldUpdate {
	return &NullableCustomFieldUpdate{value: val, isSet: true}
}

func (v NullableCustomFieldUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomFieldUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
