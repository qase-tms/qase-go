/*
Qase.io TestOps API v1

Qase TestOps API v1 Specification.

API version: 1.0.0
Contact: support@qase.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v1_client

import (
	"encoding/json"
)

// checks if the ProjectCounts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectCounts{}

// ProjectCounts struct for ProjectCounts
type ProjectCounts struct {
	Cases      *int32                `json:"cases,omitempty"`
	Suites     *int32                `json:"suites,omitempty"`
	Milestones *int32                `json:"milestones,omitempty"`
	Runs       *ProjectCountsRuns    `json:"runs,omitempty"`
	Defects    *ProjectCountsDefects `json:"defects,omitempty"`
}

// NewProjectCounts instantiates a new ProjectCounts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectCounts() *ProjectCounts {
	this := ProjectCounts{}
	return &this
}

// NewProjectCountsWithDefaults instantiates a new ProjectCounts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectCountsWithDefaults() *ProjectCounts {
	this := ProjectCounts{}
	return &this
}

// GetCases returns the Cases field value if set, zero value otherwise.
func (o *ProjectCounts) GetCases() int32 {
	if o == nil || IsNil(o.Cases) {
		var ret int32
		return ret
	}
	return *o.Cases
}

// GetCasesOk returns a tuple with the Cases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectCounts) GetCasesOk() (*int32, bool) {
	if o == nil || IsNil(o.Cases) {
		return nil, false
	}
	return o.Cases, true
}

// HasCases returns a boolean if a field has been set.
func (o *ProjectCounts) HasCases() bool {
	if o != nil && !IsNil(o.Cases) {
		return true
	}

	return false
}

// SetCases gets a reference to the given int32 and assigns it to the Cases field.
func (o *ProjectCounts) SetCases(v int32) {
	o.Cases = &v
}

// GetSuites returns the Suites field value if set, zero value otherwise.
func (o *ProjectCounts) GetSuites() int32 {
	if o == nil || IsNil(o.Suites) {
		var ret int32
		return ret
	}
	return *o.Suites
}

// GetSuitesOk returns a tuple with the Suites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectCounts) GetSuitesOk() (*int32, bool) {
	if o == nil || IsNil(o.Suites) {
		return nil, false
	}
	return o.Suites, true
}

// HasSuites returns a boolean if a field has been set.
func (o *ProjectCounts) HasSuites() bool {
	if o != nil && !IsNil(o.Suites) {
		return true
	}

	return false
}

// SetSuites gets a reference to the given int32 and assigns it to the Suites field.
func (o *ProjectCounts) SetSuites(v int32) {
	o.Suites = &v
}

// GetMilestones returns the Milestones field value if set, zero value otherwise.
func (o *ProjectCounts) GetMilestones() int32 {
	if o == nil || IsNil(o.Milestones) {
		var ret int32
		return ret
	}
	return *o.Milestones
}

// GetMilestonesOk returns a tuple with the Milestones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectCounts) GetMilestonesOk() (*int32, bool) {
	if o == nil || IsNil(o.Milestones) {
		return nil, false
	}
	return o.Milestones, true
}

// HasMilestones returns a boolean if a field has been set.
func (o *ProjectCounts) HasMilestones() bool {
	if o != nil && !IsNil(o.Milestones) {
		return true
	}

	return false
}

// SetMilestones gets a reference to the given int32 and assigns it to the Milestones field.
func (o *ProjectCounts) SetMilestones(v int32) {
	o.Milestones = &v
}

// GetRuns returns the Runs field value if set, zero value otherwise.
func (o *ProjectCounts) GetRuns() ProjectCountsRuns {
	if o == nil || IsNil(o.Runs) {
		var ret ProjectCountsRuns
		return ret
	}
	return *o.Runs
}

// GetRunsOk returns a tuple with the Runs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectCounts) GetRunsOk() (*ProjectCountsRuns, bool) {
	if o == nil || IsNil(o.Runs) {
		return nil, false
	}
	return o.Runs, true
}

// HasRuns returns a boolean if a field has been set.
func (o *ProjectCounts) HasRuns() bool {
	if o != nil && !IsNil(o.Runs) {
		return true
	}

	return false
}

// SetRuns gets a reference to the given ProjectCountsRuns and assigns it to the Runs field.
func (o *ProjectCounts) SetRuns(v ProjectCountsRuns) {
	o.Runs = &v
}

// GetDefects returns the Defects field value if set, zero value otherwise.
func (o *ProjectCounts) GetDefects() ProjectCountsDefects {
	if o == nil || IsNil(o.Defects) {
		var ret ProjectCountsDefects
		return ret
	}
	return *o.Defects
}

// GetDefectsOk returns a tuple with the Defects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectCounts) GetDefectsOk() (*ProjectCountsDefects, bool) {
	if o == nil || IsNil(o.Defects) {
		return nil, false
	}
	return o.Defects, true
}

// HasDefects returns a boolean if a field has been set.
func (o *ProjectCounts) HasDefects() bool {
	if o != nil && !IsNil(o.Defects) {
		return true
	}

	return false
}

// SetDefects gets a reference to the given ProjectCountsDefects and assigns it to the Defects field.
func (o *ProjectCounts) SetDefects(v ProjectCountsDefects) {
	o.Defects = &v
}

func (o ProjectCounts) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectCounts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cases) {
		toSerialize["cases"] = o.Cases
	}
	if !IsNil(o.Suites) {
		toSerialize["suites"] = o.Suites
	}
	if !IsNil(o.Milestones) {
		toSerialize["milestones"] = o.Milestones
	}
	if !IsNil(o.Runs) {
		toSerialize["runs"] = o.Runs
	}
	if !IsNil(o.Defects) {
		toSerialize["defects"] = o.Defects
	}
	return toSerialize, nil
}

type NullableProjectCounts struct {
	value *ProjectCounts
	isSet bool
}

func (v NullableProjectCounts) Get() *ProjectCounts {
	return v.value
}

func (v *NullableProjectCounts) Set(val *ProjectCounts) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectCounts) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectCounts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectCounts(val *ProjectCounts) *NullableProjectCounts {
	return &NullableProjectCounts{value: val, isSet: true}
}

func (v NullableProjectCounts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectCounts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
