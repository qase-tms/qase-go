/*
Qase.io TestOps API v1

Qase TestOps API v1 Specification.

API version: 1.0.0
Contact: support@qase.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v1_client

import (
	"encoding/json"
	"time"
)

// checks if the SharedStep type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SharedStep{}

// SharedStep struct for SharedStep
type SharedStep struct {
	Hash           *string             `json:"hash,omitempty"`
	Title          *string             `json:"title,omitempty"`
	Action         *string             `json:"action,omitempty"`
	ExpectedResult *string             `json:"expected_result,omitempty"`
	Steps          []SharedStepContent `json:"steps,omitempty"`
	Data           *string             `json:"data,omitempty"`
	Cases          []int64             `json:"cases,omitempty"`
	CasesCount     *int32              `json:"cases_count,omitempty"`
	// Deprecated, use the `created_at` property instead.
	// Deprecated
	Created *string `json:"created,omitempty"`
	// Deprecated, use the `updated_at` property instead.
	// Deprecated
	Updated   *string    `json:"updated,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// NewSharedStep instantiates a new SharedStep object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSharedStep() *SharedStep {
	this := SharedStep{}
	return &this
}

// NewSharedStepWithDefaults instantiates a new SharedStep object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSharedStepWithDefaults() *SharedStep {
	this := SharedStep{}
	return &this
}

// GetHash returns the Hash field value if set, zero value otherwise.
func (o *SharedStep) GetHash() string {
	if o == nil || IsNil(o.Hash) {
		var ret string
		return ret
	}
	return *o.Hash
}

// GetHashOk returns a tuple with the Hash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedStep) GetHashOk() (*string, bool) {
	if o == nil || IsNil(o.Hash) {
		return nil, false
	}
	return o.Hash, true
}

// HasHash returns a boolean if a field has been set.
func (o *SharedStep) HasHash() bool {
	if o != nil && !IsNil(o.Hash) {
		return true
	}

	return false
}

// SetHash gets a reference to the given string and assigns it to the Hash field.
func (o *SharedStep) SetHash(v string) {
	o.Hash = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *SharedStep) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedStep) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *SharedStep) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *SharedStep) SetTitle(v string) {
	o.Title = &v
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *SharedStep) GetAction() string {
	if o == nil || IsNil(o.Action) {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedStep) GetActionOk() (*string, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *SharedStep) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *SharedStep) SetAction(v string) {
	o.Action = &v
}

// GetExpectedResult returns the ExpectedResult field value if set, zero value otherwise.
func (o *SharedStep) GetExpectedResult() string {
	if o == nil || IsNil(o.ExpectedResult) {
		var ret string
		return ret
	}
	return *o.ExpectedResult
}

// GetExpectedResultOk returns a tuple with the ExpectedResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedStep) GetExpectedResultOk() (*string, bool) {
	if o == nil || IsNil(o.ExpectedResult) {
		return nil, false
	}
	return o.ExpectedResult, true
}

// HasExpectedResult returns a boolean if a field has been set.
func (o *SharedStep) HasExpectedResult() bool {
	if o != nil && !IsNil(o.ExpectedResult) {
		return true
	}

	return false
}

// SetExpectedResult gets a reference to the given string and assigns it to the ExpectedResult field.
func (o *SharedStep) SetExpectedResult(v string) {
	o.ExpectedResult = &v
}

// GetSteps returns the Steps field value if set, zero value otherwise.
func (o *SharedStep) GetSteps() []SharedStepContent {
	if o == nil || IsNil(o.Steps) {
		var ret []SharedStepContent
		return ret
	}
	return o.Steps
}

// GetStepsOk returns a tuple with the Steps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedStep) GetStepsOk() ([]SharedStepContent, bool) {
	if o == nil || IsNil(o.Steps) {
		return nil, false
	}
	return o.Steps, true
}

// HasSteps returns a boolean if a field has been set.
func (o *SharedStep) HasSteps() bool {
	if o != nil && !IsNil(o.Steps) {
		return true
	}

	return false
}

// SetSteps gets a reference to the given []SharedStepContent and assigns it to the Steps field.
func (o *SharedStep) SetSteps(v []SharedStepContent) {
	o.Steps = v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *SharedStep) GetData() string {
	if o == nil || IsNil(o.Data) {
		var ret string
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedStep) GetDataOk() (*string, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *SharedStep) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given string and assigns it to the Data field.
func (o *SharedStep) SetData(v string) {
	o.Data = &v
}

// GetCases returns the Cases field value if set, zero value otherwise.
func (o *SharedStep) GetCases() []int64 {
	if o == nil || IsNil(o.Cases) {
		var ret []int64
		return ret
	}
	return o.Cases
}

// GetCasesOk returns a tuple with the Cases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedStep) GetCasesOk() ([]int64, bool) {
	if o == nil || IsNil(o.Cases) {
		return nil, false
	}
	return o.Cases, true
}

// HasCases returns a boolean if a field has been set.
func (o *SharedStep) HasCases() bool {
	if o != nil && !IsNil(o.Cases) {
		return true
	}

	return false
}

// SetCases gets a reference to the given []int64 and assigns it to the Cases field.
func (o *SharedStep) SetCases(v []int64) {
	o.Cases = v
}

// GetCasesCount returns the CasesCount field value if set, zero value otherwise.
func (o *SharedStep) GetCasesCount() int32 {
	if o == nil || IsNil(o.CasesCount) {
		var ret int32
		return ret
	}
	return *o.CasesCount
}

// GetCasesCountOk returns a tuple with the CasesCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedStep) GetCasesCountOk() (*int32, bool) {
	if o == nil || IsNil(o.CasesCount) {
		return nil, false
	}
	return o.CasesCount, true
}

// HasCasesCount returns a boolean if a field has been set.
func (o *SharedStep) HasCasesCount() bool {
	if o != nil && !IsNil(o.CasesCount) {
		return true
	}

	return false
}

// SetCasesCount gets a reference to the given int32 and assigns it to the CasesCount field.
func (o *SharedStep) SetCasesCount(v int32) {
	o.CasesCount = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
// Deprecated
func (o *SharedStep) GetCreated() string {
	if o == nil || IsNil(o.Created) {
		var ret string
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *SharedStep) GetCreatedOk() (*string, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *SharedStep) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given string and assigns it to the Created field.
// Deprecated
func (o *SharedStep) SetCreated(v string) {
	o.Created = &v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
// Deprecated
func (o *SharedStep) GetUpdated() string {
	if o == nil || IsNil(o.Updated) {
		var ret string
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *SharedStep) GetUpdatedOk() (*string, bool) {
	if o == nil || IsNil(o.Updated) {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *SharedStep) HasUpdated() bool {
	if o != nil && !IsNil(o.Updated) {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given string and assigns it to the Updated field.
// Deprecated
func (o *SharedStep) SetUpdated(v string) {
	o.Updated = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *SharedStep) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedStep) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *SharedStep) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *SharedStep) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *SharedStep) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedStep) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *SharedStep) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *SharedStep) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o SharedStep) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SharedStep) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Hash) {
		toSerialize["hash"] = o.Hash
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	if !IsNil(o.ExpectedResult) {
		toSerialize["expected_result"] = o.ExpectedResult
	}
	if !IsNil(o.Steps) {
		toSerialize["steps"] = o.Steps
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Cases) {
		toSerialize["cases"] = o.Cases
	}
	if !IsNil(o.CasesCount) {
		toSerialize["cases_count"] = o.CasesCount
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Updated) {
		toSerialize["updated"] = o.Updated
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableSharedStep struct {
	value *SharedStep
	isSet bool
}

func (v NullableSharedStep) Get() *SharedStep {
	return v.value
}

func (v *NullableSharedStep) Set(val *SharedStep) {
	v.value = val
	v.isSet = true
}

func (v NullableSharedStep) IsSet() bool {
	return v.isSet
}

func (v *NullableSharedStep) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSharedStep(val *SharedStep) *NullableSharedStep {
	return &NullableSharedStep{value: val, isSet: true}
}

func (v NullableSharedStep) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSharedStep) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
