/*
Qase.io TestOps API v1

Qase TestOps API v1 Specification.

API version: 1.0.0
Contact: support@qase.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v1_client

import (
	"encoding/json"
)

// checks if the SuiteUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SuiteUpdate{}

// SuiteUpdate struct for SuiteUpdate
type SuiteUpdate struct {
	// Test suite title.
	Title *string `json:"title,omitempty"`
	// Test suite description.
	Description *string `json:"description,omitempty"`
	// Test suite preconditions
	Preconditions *string `json:"preconditions,omitempty"`
	// Parent suite ID
	ParentId NullableInt64 `json:"parent_id,omitempty"`
}

// NewSuiteUpdate instantiates a new SuiteUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuiteUpdate() *SuiteUpdate {
	this := SuiteUpdate{}
	return &this
}

// NewSuiteUpdateWithDefaults instantiates a new SuiteUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuiteUpdateWithDefaults() *SuiteUpdate {
	this := SuiteUpdate{}
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *SuiteUpdate) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuiteUpdate) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *SuiteUpdate) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *SuiteUpdate) SetTitle(v string) {
	o.Title = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SuiteUpdate) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuiteUpdate) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SuiteUpdate) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SuiteUpdate) SetDescription(v string) {
	o.Description = &v
}

// GetPreconditions returns the Preconditions field value if set, zero value otherwise.
func (o *SuiteUpdate) GetPreconditions() string {
	if o == nil || IsNil(o.Preconditions) {
		var ret string
		return ret
	}
	return *o.Preconditions
}

// GetPreconditionsOk returns a tuple with the Preconditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuiteUpdate) GetPreconditionsOk() (*string, bool) {
	if o == nil || IsNil(o.Preconditions) {
		return nil, false
	}
	return o.Preconditions, true
}

// HasPreconditions returns a boolean if a field has been set.
func (o *SuiteUpdate) HasPreconditions() bool {
	if o != nil && !IsNil(o.Preconditions) {
		return true
	}

	return false
}

// SetPreconditions gets a reference to the given string and assigns it to the Preconditions field.
func (o *SuiteUpdate) SetPreconditions(v string) {
	o.Preconditions = &v
}

// GetParentId returns the ParentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SuiteUpdate) GetParentId() int64 {
	if o == nil || IsNil(o.ParentId.Get()) {
		var ret int64
		return ret
	}
	return *o.ParentId.Get()
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SuiteUpdate) GetParentIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ParentId.Get(), o.ParentId.IsSet()
}

// HasParentId returns a boolean if a field has been set.
func (o *SuiteUpdate) HasParentId() bool {
	if o != nil && o.ParentId.IsSet() {
		return true
	}

	return false
}

// SetParentId gets a reference to the given NullableInt64 and assigns it to the ParentId field.
func (o *SuiteUpdate) SetParentId(v int64) {
	o.ParentId.Set(&v)
}

// SetParentIdNil sets the value for ParentId to be an explicit nil
func (o *SuiteUpdate) SetParentIdNil() {
	o.ParentId.Set(nil)
}

// UnsetParentId ensures that no value is present for ParentId, not even an explicit nil
func (o *SuiteUpdate) UnsetParentId() {
	o.ParentId.Unset()
}

func (o SuiteUpdate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SuiteUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Preconditions) {
		toSerialize["preconditions"] = o.Preconditions
	}
	if o.ParentId.IsSet() {
		toSerialize["parent_id"] = o.ParentId.Get()
	}
	return toSerialize, nil
}

type NullableSuiteUpdate struct {
	value *SuiteUpdate
	isSet bool
}

func (v NullableSuiteUpdate) Get() *SuiteUpdate {
	return v.value
}

func (v *NullableSuiteUpdate) Set(val *SuiteUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableSuiteUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableSuiteUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuiteUpdate(val *SuiteUpdate) *NullableSuiteUpdate {
	return &NullableSuiteUpdate{value: val, isSet: true}
}

func (v NullableSuiteUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuiteUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
