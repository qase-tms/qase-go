/*
Qase.io TestOps API v1

Qase TestOps API v1 Specification.

API version: 1.0.0
Contact: support@qase.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v1_client

import (
	"encoding/json"
	"fmt"

	"gopkg.in/validator.v2"
)

// TestCaseParameterCreate - struct for TestCaseParameterCreate
type TestCaseParameterCreate struct {
	ParameterGroup  *ParameterGroup
	ParameterShared *ParameterShared
	ParameterSingle *ParameterSingle
}

// ParameterGroupAsTestCaseParameterCreate is a convenience function that returns ParameterGroup wrapped in TestCaseParameterCreate
func ParameterGroupAsTestCaseParameterCreate(v *ParameterGroup) TestCaseParameterCreate {
	return TestCaseParameterCreate{
		ParameterGroup: v,
	}
}

// ParameterSharedAsTestCaseParameterCreate is a convenience function that returns ParameterShared wrapped in TestCaseParameterCreate
func ParameterSharedAsTestCaseParameterCreate(v *ParameterShared) TestCaseParameterCreate {
	return TestCaseParameterCreate{
		ParameterShared: v,
	}
}

// ParameterSingleAsTestCaseParameterCreate is a convenience function that returns ParameterSingle wrapped in TestCaseParameterCreate
func ParameterSingleAsTestCaseParameterCreate(v *ParameterSingle) TestCaseParameterCreate {
	return TestCaseParameterCreate{
		ParameterSingle: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *TestCaseParameterCreate) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ParameterGroup
	err = newStrictDecoder(data).Decode(&dst.ParameterGroup)
	if err == nil {
		jsonParameterGroup, _ := json.Marshal(dst.ParameterGroup)
		if string(jsonParameterGroup) == "{}" { // empty struct
			dst.ParameterGroup = nil
		} else {
			if err = validator.Validate(dst.ParameterGroup); err != nil {
				dst.ParameterGroup = nil
			} else {
				match++
			}
		}
	} else {
		dst.ParameterGroup = nil
	}

	// try to unmarshal data into ParameterShared
	err = newStrictDecoder(data).Decode(&dst.ParameterShared)
	if err == nil {
		jsonParameterShared, _ := json.Marshal(dst.ParameterShared)
		if string(jsonParameterShared) == "{}" { // empty struct
			dst.ParameterShared = nil
		} else {
			if err = validator.Validate(dst.ParameterShared); err != nil {
				dst.ParameterShared = nil
			} else {
				match++
			}
		}
	} else {
		dst.ParameterShared = nil
	}

	// try to unmarshal data into ParameterSingle
	err = newStrictDecoder(data).Decode(&dst.ParameterSingle)
	if err == nil {
		jsonParameterSingle, _ := json.Marshal(dst.ParameterSingle)
		if string(jsonParameterSingle) == "{}" { // empty struct
			dst.ParameterSingle = nil
		} else {
			if err = validator.Validate(dst.ParameterSingle); err != nil {
				dst.ParameterSingle = nil
			} else {
				match++
			}
		}
	} else {
		dst.ParameterSingle = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ParameterGroup = nil
		dst.ParameterShared = nil
		dst.ParameterSingle = nil

		return fmt.Errorf("data matches more than one schema in oneOf(TestCaseParameterCreate)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(TestCaseParameterCreate)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TestCaseParameterCreate) MarshalJSON() ([]byte, error) {
	if src.ParameterGroup != nil {
		return json.Marshal(&src.ParameterGroup)
	}

	if src.ParameterShared != nil {
		return json.Marshal(&src.ParameterShared)
	}

	if src.ParameterSingle != nil {
		return json.Marshal(&src.ParameterSingle)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TestCaseParameterCreate) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ParameterGroup != nil {
		return obj.ParameterGroup
	}

	if obj.ParameterShared != nil {
		return obj.ParameterShared
	}

	if obj.ParameterSingle != nil {
		return obj.ParameterSingle
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj TestCaseParameterCreate) GetActualInstanceValue() interface{} {
	if obj.ParameterGroup != nil {
		return *obj.ParameterGroup
	}

	if obj.ParameterShared != nil {
		return *obj.ParameterShared
	}

	if obj.ParameterSingle != nil {
		return *obj.ParameterSingle
	}

	// all schemas are nil
	return nil
}

type NullableTestCaseParameterCreate struct {
	value *TestCaseParameterCreate
	isSet bool
}

func (v NullableTestCaseParameterCreate) Get() *TestCaseParameterCreate {
	return v.value
}

func (v *NullableTestCaseParameterCreate) Set(val *TestCaseParameterCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableTestCaseParameterCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableTestCaseParameterCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestCaseParameterCreate(val *TestCaseParameterCreate) *NullableTestCaseParameterCreate {
	return &NullableTestCaseParameterCreate{value: val, isSet: true}
}

func (v NullableTestCaseParameterCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestCaseParameterCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
